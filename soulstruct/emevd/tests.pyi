from soulstruct.emevd.ds_types import *
import soulstruct.emevd.pydses as p
from typing import Union, Callable

# Restart decorators.
def NeverRestart(func: Callable): ...
def RestartOnRest(func: Callable): ...
def UnknownRestart(func: Callable): ...


# Dummy enum for accessing event flags defined by events.
class EVENTS(Flag): ...
# Dummy class for creating conditions.
class Condition(object):
    def __init__(self, condition: bool, hold=False): ...


# Terminators.
END = ...
RESTART = ...


# The Await function.
def Await(condition): ...


# Boolean constants.
THIS_FLAG = ...
THIS_SLOT_FLAG = ...
HOST = ...
CLIENT = ...
SINGLEPLAYER = ...
MULTIPLAYER = ...
ONLINE = ...
OFFLINE = ...
DLC_OWNED = ...
SKULL_LANTERN_ACTIVE = ...

# Compare these constants to numeric values.
WHITE_WORLD_TENDENCY = ...
BLACK_WORLD_TENDENCY = ...
NEW_GAME_CYCLE = ...
SOUL_LEVEL = ...

def FlagEnabled(flag: Union[Flag, int]): ...
def FlagDisabled(flag: Union[Flag, int]): ...

def SecondsElapsed(elapsed_seconds): ...
def FramesElapsed(elapsed_frames): ...

def EntityInsideRegion(entity: MapEntity, region: Region): ...
def EntityOutsideRegion(entity: MapEntity, region: Region): ...
def PlayerInsideRegion(region: Region): ...
def PlayerOutsideRegion(region: Region): ...
def AllPlayersInsideRegion(region: Region): ...
def AllPlayersOutsideRegion(region: Region): ...

def InsideMap(game_map: Map): ...
def OutsideMap(game_map: Map): ...

def EntityWithinDistance(first_entity: MapEntity, second_entity: MapEntity, max_distance): ...
def EntityBeyondDistance(first_entity: MapEntity, second_entity: MapEntity, min_distance): ...
def PlayerWithinDistance(entity: MapEntity, max_distance): ...
def PlayerBeyondDistance(entity: MapEntity, min_distance): ...

# These do NOT include the Bottomless Box.
def HasItem(item: Item): ...  # Can be used with any subclass of Item.
def HasWeapon(weapon: Weapon): ...
def HasArmor(armor: Armor): ...
def HasRing(ring: Ring): ...
def HasGood(good: Good): ...

# These include the Bottomless Box.
def OwnsItem(item: Item): ...  # Can be used with any subclass of Item.
def OwnsWeapon(weapon: Weapon): ...
def OwnsArmor(armor: Armor): ...
def OwnsRing(ring: Ring): ...
def OwnsGood(good: Good): ...

# This test creates a dialog prompt, and returns True when the prompt is activated (with A).
# Should only be used with Await().
def DialogPromptActivated(prompt_text: Union[int, Text], anchor_entity: MapEntity, facing_angle: float=None,
                          max_distance: float=None, model_point: int=None, human_or_hollow_only=True, button=0,
                          boss_version=False, line_intersects: MapEntity=None): ...

def MultiplayerEvent(multiplayer_event): ...

def EventFlagValue(left_start_flag, left_bit_count, right_start_flag, right_bit_count): ...  # Compare two flags.

def AnyItemDroppedInRegion(region: Region): ...
def ItemDropped(item: Item): ...

def IsAlive(character: Character): ...
def IsDead(character: Character): ...

def IsAttacked(attacked_entity: Union[Object, Character], attacking_character: Character): ...

# The values returned by these should be compared with a number literal.
def TrueFlagCount(flag_range) -> int: ...
def EventValue(start_flag, bit_count) -> int: ...  # Use this to compare an event value to an arbitrary integer.
def HealthRatio(character: Character) -> float: ...
def HealthValue(character: Character) -> int: ...
def PartHealthValue(character: Character, part_type) -> int: ...

# Character tests.
def IsChrType(character: Character, character_type: p.CharacterType): ...
def IsHollow(character: Character): ...
def IsHuman(character: Character): ...
def IsInvader(character: Character): ...
def IsBlackPhantom(character: Character): ...
def IsWhitePhantom(character: Character): ...

def PlayerIsClass(class_type: p.ClassType): ...
def PlayerInCovenant(covenant_type: p.Covenant): ...

def IsTargeting(targeting_chr: Character, targeted_chr: Character): ...
def HasAiStatus(character: Character, ai_state): ...
def AiStatusIsNormal(character: Character): ...
def AiStatusIsRecognition(character: Character): ...
def AiStatusIsAlert(character: Character): ...
def AiStatusIsBattle(character: Character): ...

def HasTaeEvent(character: Character, tae_event_id): ...
def HasSpecialEffect(character: Character, special_effect): ...

def BackreadEnabled(character: Character): ...
def BackreadDisabled(character: Character): ...

# Objects
def IsDestroyed(obj: Object): ...
def IsActivated(obj: Object): ...

# Hitboxes
def PlayerStandingOnHitbox(hitbox: Hitbox): ...
def PlayerMovingOnHitbox(hitbox: Hitbox): ...
def PlayerRunningOnHitbox(hitbox: Hitbox): ...

from soulstruct.base.params.utils import ParamFieldInfo, pad_field, bit_pad_field


BONFIRE_WARP_PARAM_ST = {
    "param_type": "BONFIRE_WARP_PARAM_ST",
    "file_name": "",  # TODO
    "nickname": "",  # TODO
    "fields": [
        ParamFieldInfo(
            "disableParam_NT:1",
            "Disable Param - Network Test",
            True,
            int,
            'Parameters marked with �� are excluded in the NT version package.',
        ),
        ParamFieldInfo(
            "disableParamReserve1:7",
            "Reserve for package output 1",
            False,
            bit_pad_field(7),
            'Reserve for package output 1',
        ),
        ParamFieldInfo(
            "disableParamReserve2[3]",
            "Reserve for package output 2",
            False,
            pad_field(3),
            'Reserve for package output 2',
        ),
        ParamFieldInfo(
            "eventflagId",
            "Event Flag ID",
            True,
            int,
            'Release condition event flag ID',
        ),
        ParamFieldInfo(
            "bonfireEntityId",
            "Bonfire Entity ID",
            True,
            int,
            'Bonfire entity ID',
        ),
        ParamFieldInfo(
            "pad4[2]",
            "pad",
            False,
            pad_field(2),
            'Padding. The place where the deleted old work origin data was defined',
        ),
        ParamFieldInfo(
            "bonfireSubCategorySortId",
            "Sort ID",
            True,
            int,
            'Bonfire Warp Subcategory Sort ID. Specify the order (ascending order) in the same subcategory',
        ),
        ParamFieldInfo(
            "forbiddenIconId",
            "Warp Prohibition Icon ID",
            True,
            int,
            'Icon ID when warp is prohibited',
        ),
        ParamFieldInfo(
            "dispMinZoomStep",
            "Display Zoom Step",
            True,
            int,
            "TODO",
        ),
        ParamFieldInfo(
            "selectMinZoomStep",
            "Selectable Zoom Step",
            True,
            int,
            "TODO",
        ),
        ParamFieldInfo(
            "bonfireSubCategoryId",
            "Subcategory ID",
            True,
            int,
            'Bonfire Warp Subcategory Parameter ID (-1: Invalid). Set which subcategory it belongs to. If it is invalid, it will not be displayed in the bonfire list.',
        ),
        ParamFieldInfo(
            "clearedEventFlagId",
            "Cleared Event Flag ID",
            True,
            int,
            'Cleared event flag ID (0: always treated as cleared)',
        ),
        ParamFieldInfo(
            "iconId",
            "Icon ID",
            True,
            int,
            'Icon ID',
        ),
        ParamFieldInfo(
            "dispMask00:1",
            "Display Setting M00",
            True,
            int,
            'Whether to display with M00',
        ),
        ParamFieldInfo(
            "dispMask01:1",
            "Display Setting M01",
            True,
            int,
            'Whether to display with M01',
        ),
        ParamFieldInfo(
            "pad1:6",
            "pad",
            False,
            bit_pad_field(6),
            'pad1: 6',
        ),
        ParamFieldInfo(
            "pad2[1]",
            "pad",
            False,
            pad_field(1),
            'pad2',
        ),
        ParamFieldInfo(
            "areaNo",
            "Map Area",
            True,
            int,
            'AA part of mAA_BB_CC_DD',
        ),
        ParamFieldInfo(
            "gridXNo",
            "Map Block",
            True,
            int,
            'BB part of mAA_BB_CC_DD',
        ),
        ParamFieldInfo(
            "gridZNo",
            "Map Region",
            True,
            int,
            'CC part of mAA_BB_CC_DD',
        ),
        ParamFieldInfo(
            "pad3[1]",
            "Padding",
            False,
            pad_field(1),
            'pad3',
        ),
        ParamFieldInfo(
            "posX",
            "Coordinate: X",
            True,
            float,
            'X coordinate',
        ),
        ParamFieldInfo(
            "posY",
            "Coordinate: Y",
            True,
            float,
            'Y coordinate (not used)',
        ),
        ParamFieldInfo(
            "posZ",
            "Coordinate: Z",
            True,
            float,
            'Z coordinate',
        ),
        ParamFieldInfo(
            "textId1",
            "Text ID [1]",
            True,
            int,
            'The text ID to display. If the value is invalid (-1), nothing is displayed.',
        ),
        ParamFieldInfo(
            "textEnableFlagId1",
            "Text Enable Flag ID [1]",
            True,
            int,
            'Display text Event flag ID. Display if the event flag is On. If the event flag ID (0) is invalid, it will be treated as On.',
        ),
        ParamFieldInfo(
            "textDisableFlagId1",
            "Text Disable Flag ID [1]",
            True,
            int,
            'Hidden event flag ID of the text. If the event flag is On, it will not be displayed. It takes precedence over the display event flag ID. If the event flag ID (0) is invalid, it will be treated as Off.',
        ),
        ParamFieldInfo(
            "textId2",
            "Text ID [2]",
            True,
            int,
            'The text ID to display. If it is an invalid value (-2), nothing is displayed.',
        ),
        ParamFieldInfo(
            "textEnableFlagId2",
            "Text Enable Flag ID [2]",
            True,
            int,
            'Display text Event flag ID. Display if the event flag is On. If the event flag ID (1) is invalid, it will be treated as On.',
        ),
        ParamFieldInfo(
            "textDisableFlagId2",
            "Text Disable Flag ID [2]",
            True,
            int,
            'Hidden event flag ID of the text. If the event flag is On, it will not be displayed. It takes precedence over the display event flag ID. If the event flag ID (1) is invalid, it will be treated as Off.',
        ),
        ParamFieldInfo(
            "textId3",
            "Text ID [3]",
            True,
            int,
            'The text ID to display. If it is an invalid value (-3), nothing is displayed.',
        ),
        ParamFieldInfo(
            "textEnableFlagId3",
            "Text Enable Flag ID [3]",
            True,
            int,
            'Display text Event flag ID. Display if the event flag is On. If the event flag ID (2) is invalid, it will be treated as On.',
        ),
        ParamFieldInfo(
            "textDisableFlagId3",
            "Text Disable Flag ID [3]",
            True,
            int,
            'Hidden event flag ID of the text. If the event flag is On, it will not be displayed. It takes precedence over the display event flag ID. If the event flag ID (2) is invalid, it will be treated as Off.',
        ),
        ParamFieldInfo(
            "textId4",
            "Text ID [4]",
            True,
            int,
            'The text ID to display. If it is an invalid value (-4), nothing is displayed.',
        ),
        ParamFieldInfo(
            "textEnableFlagId4",
            "Text Enable Flag ID [4]",
            True,
            int,
            'Display text Event flag ID. Display if the event flag is On. If the event flag ID (3) is invalid, it will be treated as On.',
        ),
        ParamFieldInfo(
            "textDisableFlagId4",
            "Text Disable Flag ID [4]",
            True,
            int,
            'Hidden event flag ID of the text. If the event flag is On, it will not be displayed. It takes precedence over the display event flag ID. If the event flag ID (3) is invalid, it will be treated as Off.',
        ),
        ParamFieldInfo(
            "textId5",
            "Text ID [5]",
            True,
            int,
            'The text ID to display. If it is an invalid value (-5), nothing is displayed.',
        ),
        ParamFieldInfo(
            "textEnableFlagId5",
            "Text Enable Flag ID [5]",
            True,
            int,
            'Display text Event flag ID. Display if the event flag is On. If the event flag ID (4) is invalid, it will be treated as On.',
        ),
        ParamFieldInfo(
            "textDisableFlagId5",
            "Text Disable Flag ID [5]",
            True,
            int,
            'Hidden event flag ID of the text. If the event flag is On, it will not be displayed. It takes precedence over the display event flag ID. If the event flag ID (4) is invalid, it will be treated as Off.',
        ),
        ParamFieldInfo(
            "textId6",
            "Text ID [6]",
            True,
            int,
            'The text ID to display. If it is an invalid value (-6), nothing is displayed.',
        ),
        ParamFieldInfo(
            "textEnableFlagId6",
            "Text Enable Flag ID [6]",
            True,
            int,
            'Display text Event flag ID. Display if the event flag is On. If the event flag ID (5) is invalid, it will be treated as On.',
        ),
        ParamFieldInfo(
            "textDisableFlagId6",
            "Text Disable Flag ID [6]",
            True,
            int,
            'Hidden event flag ID of the text. If the event flag is On, it will not be displayed. It takes precedence over the display event flag ID. If the event flag ID (5) is invalid, it will be treated as Off.',
        ),
        ParamFieldInfo(
            "textId7",
            "Text ID [7]",
            True,
            int,
            'The text ID to display. If it is an invalid value (-7), nothing is displayed.',
        ),
        ParamFieldInfo(
            "textEnableFlagId7",
            "Text Enable Flag ID [7]",
            True,
            int,
            'Display text Event flag ID. Display if the event flag is On. If the event flag ID (6) is invalid, it will be treated as On.',
        ),
        ParamFieldInfo(
            "textDisableFlagId7",
            "Text Disable Flag ID [7]",
            True,
            int,
            'Hidden event flag ID of the text. If the event flag is On, it will not be displayed. It takes precedence over the display event flag ID. If the event flag ID (6) is invalid, it will be treated as Off.',
        ),
        ParamFieldInfo(
            "textId8",
            "Text ID [8]",
            True,
            int,
            'The text ID to display. If it is an invalid value (-8), nothing is displayed.',
        ),
        ParamFieldInfo(
            "textEnableFlagId8",
            "Text Enable Flag ID [8]",
            True,
            int,
            'Display text Event flag ID. Display if the event flag is On. If the event flag ID (7) is invalid, it will be treated as On.',
        ),
        ParamFieldInfo(
            "textDisableFlagId8",
            "Text Disable Flag ID [8]",
            True,
            int,
            'Hidden event flag ID of the text. If the event flag is On, it will not be displayed. It takes precedence over the display event flag ID. If the event flag ID (7) is invalid, it will be treated as Off.',
        ),
        ParamFieldInfo(
            "textType1",
            "Text Type [1]",
            True,
            int,
            'Text type (place name, NPC name, ...)',
        ),
        ParamFieldInfo(
            "textType2",
            "Text Type [2]",
            True,
            int,
            'Text type (place name, NPC name, ...)',
        ),
        ParamFieldInfo(
            "textType3",
            "Text Type [3]",
            True,
            int,
            'Text type (place name, NPC name, ...)',
        ),
        ParamFieldInfo(
            "textType4",
            "Text Type [4]",
            True,
            int,
            'Text type (place name, NPC name, ...)',
        ),
        ParamFieldInfo(
            "textType5",
            "Text Type [5]",
            True,
            int,
            'Text type (place name, NPC name, ...)',
        ),
        ParamFieldInfo(
            "textType6",
            "Text Type [6]",
            True,
            int,
            'Text type (place name, NPC name, ...)',
        ),
        ParamFieldInfo(
            "textType7",
            "Text Type [7]",
            True,
            int,
            'Text type (place name, NPC name, ...)',
        ),
        ParamFieldInfo(
            "textType8",
            "Text Type [8]",
            True,
            int,
            'Text type (place name, NPC name, ...)',
        ),
        ParamFieldInfo(
            "noIgnitionSfxDmypolyId_0",
            "Bonfire Ignition - Dummy Poly ID [0]",
            True,
            int,
            'Damipoli ID that issues SFX before bonfire ignition',
        ),
        ParamFieldInfo(
            "noIgnitionSfxId_0",
            "Bonfire Ignition - SFX ID [0]",
            True,
            int,
            'SFX ID issued before bonfire ignition. It goes out when ignited. In case of -1, SFX is not issued.',
        ),
        ParamFieldInfo(
            "noIgnitionSfxDmypolyId_1",
            "Bonfire Ignition - Dummy Poly ID [1]",
            True,
            int,
            'Damipoli ID that issues SFX before bonfire ignition',
        ),
        ParamFieldInfo(
            "noIgnitionSfxId_1",
            "Bonfire Ignition - SFX ID [1]",
            True,
            int,
            'SFX ID issued before bonfire ignition. It goes out when ignited. In case of -1, SFX is not issued.',
        ),
        ParamFieldInfo(
            "unkA8",
            "unkA8",
            True,
            int,
            '',
        ),
        ParamFieldInfo(
            "unkAC",
            "unkAC",
            True,
            int,
            '',
        ),
        ParamFieldInfo(
            "unkB0",
            "unkB0",
            True,
            int,
            '',
        ),
        ParamFieldInfo(
            "unkB4",
            "unkB4",
            True,
            int,
            '',
        ),
        ParamFieldInfo(
            "unkB8",
            "unkB8",
            True,
            int,
            '',
        ),
        ParamFieldInfo(
            "unkBC",
            "unkBC",
            True,
            int,
            '',
        ),
        ParamFieldInfo(
            "unkC0",
            "unkC0",
            True,
            int,
            '',
        ),
        ParamFieldInfo(
            "unkC4",
            "unkC4",
            True,
            int,
            '',
        ),
        ParamFieldInfo(
            "unkC8",
            "unkC8",
            True,
            int,
            '',
        ),
        ParamFieldInfo(
            "unkCC",
            "unkCC",
            True,
            int,
            '',
        ),
        ParamFieldInfo(
            "unkD0",
            "unkD0",
            True,
            int,
            '',
        ),
        ParamFieldInfo(
            "unkD4",
            "unkD4",
            True,
            int,
            '',
        ),
        ParamFieldInfo(
            "unkD8",
            "unkD8",
            True,
            int,
            '',
        ),
        ParamFieldInfo(
            "unkDC",
            "unkDC",
            True,
            int,
            '',
        ),
        ParamFieldInfo(
            "unkE0",
            "unkE0",
            True,
            int,
            '',
        ),
        ParamFieldInfo(
            "unkE4",
            "unkE4",
            True,
            int,
            '',
        ),
        ParamFieldInfo(
            "unkE8",
            "unkE8",
            True,
            int,
            '',
        ),
    ],
}

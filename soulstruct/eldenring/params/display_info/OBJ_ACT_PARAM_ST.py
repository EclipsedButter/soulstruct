from soulstruct.base.params.utils import ParamFieldInfo, pad_field, bit_pad_field


OBJ_ACT_PARAM_ST = {
    "param_type": "OBJ_ACT_PARAM_ST",
    "file_name": "",  # TODO
    "nickname": "",  # TODO
    "fields": [
        ParamFieldInfo(
            "actionEnableMsgId",
            "Action Enabled - Message ID",
            True,
            int,
            'The MsgID of the menu displayed when the action is enabled.',
        ),
        ParamFieldInfo(
            "actionFailedMsgId",
            "Action Failed - Message ID",
            True,
            int,
            'The MsgID of the menu to display when the action fails.',
        ),
        ParamFieldInfo(
            "spQualifiedPassEventFlag",
            "Unconditional Qualified Event Flag ID",
            True,
            int,
            'Event flags for unconditionally passing special conditions.',
        ),
        ParamFieldInfo(
            "playerAnimId",
            "Player Animation ID",
            True,
            int,
            'This is the animation ID for the action of the player character.',
        ),
        ParamFieldInfo(
            "chrAnimId",
            "Character Animation ID",
            True,
            int,
            'Anime ID at the time of action such as enemy',
        ),
        ParamFieldInfo(
            "validDist",
            "Valid Distance",
            True,
            int,
            'The effective distance of the action.',
        ),
        ParamFieldInfo(
            "spQualifiedId",
            "Conditional Qualified Event Flag ID [1]",
            True,
            int,
            'Special condition ID',
        ),
        ParamFieldInfo(
            "spQualifiedId2",
            "Conditional Qualified Event Flag ID [2]",
            True,
            int,
            'Special condition ID part 2',
        ),
        ParamFieldInfo(
            "objDummyId",
            "Object Dummy Poly ID",
            True,
            int,
            'Damipoli ID that is the action position of the object',
        ),
        ParamFieldInfo(
            "isEventKickSync",
            "Is Event Execution Synchronized",
            True,
            int,
            'ObjAct Whether to synchronize the events used in the execution judgment. Set to basic �~. It may be set to �� only when the actor is not important.',
        ),
        ParamFieldInfo(
            "objAnimId",
            "Object Animation ID",
            True,
            int,
            'This is the animation ID for the action of the object.',
        ),
        ParamFieldInfo(
            "validPlayerAngle",
            "Valid Player Angle",
            True,
            int,
            "The effective angle of the player's action. Effective angle difference between the player's orientation vector and the orientation vector to the object",
        ),
        ParamFieldInfo(
            "spQualifiedType",
            "Qualified ID Type [1]",
            True,
            int,
            'Types of special conditions',
        ),
        ParamFieldInfo(
            "spQualifiedType2",
            "Qualified ID Type [2]",
            True,
            int,
            'Type of special condition 2',
        ),
        ParamFieldInfo(
            "validObjAngle",
            "Valid Object Angle",
            True,
            int,
            'The action effective angle of the object. Effective angle difference between the action vector of the object and the character vector',
        ),
        ParamFieldInfo(
            "chrSorbType",
            "Character Absorb Type",
            True,
            int,
            'It is a method of adsorbing characters during object action.',
        ),
        ParamFieldInfo(
            "eventKickTiming",
            "Event Execution Timing",
            True,
            int,
            'Event execution timing',
        ),
        ParamFieldInfo(
            "pad1[2]",
            "pad1",
            False,
            pad_field(2),
            '',
        ),
        ParamFieldInfo(
            "actionButtonParamId",
            "Action Button Param ID",
            True,
            int,
            'Action button parameter ID',
        ),
        ParamFieldInfo(
            "enableTreasureDelaySec",
            "Treasure Enable Delay",
            True,
            float,
            'The number of seconds from the execution of the object action to the activation of the treasure. A setting exclusively for the object type "treasure box" of the object act.',
        ),
        ParamFieldInfo(
            "preActionSfxDmypolyId",
            "Pre-action SFX Dummy Poly ID",
            True,
            int,
            'Issue SFX from this Damipoli ID before executing the object. If it is -1, start from the origin.',
        ),
        ParamFieldInfo(
            "preActionSfxId",
            "Pre-action SFX ID",
            True,
            int,
            'SFX issued before executing the object. If it is -1, it will not be issued.',
        ),
        ParamFieldInfo(
            "pad2[40]",
            "pad2",
            False,
            pad_field(40),
            '',
        ),
    ],
}

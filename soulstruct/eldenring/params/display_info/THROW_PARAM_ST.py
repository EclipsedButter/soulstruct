from soulstruct.base.params.utils import ParamFieldInfo, pad_field, bit_pad_field


THROW_PARAM_ST = {
    "param_type": "THROW_PARAM_ST",
    "file_name": "",  # TODO
    "nickname": "",  # TODO
    "fields": [
        ParamFieldInfo(
            "AtkChrId",
            "Attacker - Character ID",
            True,
            int,
            'Throwing side character ID',
        ),
        ParamFieldInfo(
            "DefChrId",
            "Defender - Character ID",
            True,
            int,
            'Recipient character ID',
        ),
        ParamFieldInfo(
            "Dist",
            "Max Throw Distance",
            True,
            float,
            'Do not throw unless the distance is closer than this value [m]',
        ),
        ParamFieldInfo(
            "DiffAngMin",
            "Height Angle Difference - Min",
            True,
            float,
            'If the angle difference (Y-axis) between the throwing side and the receiving side is not larger than this angle, it will not be thrown.',
        ),
        ParamFieldInfo(
            "DiffAngMax",
            "Height Angle Difference - Max",
            True,
            float,
            'If the angle difference (Y-axis) between the throwing side and the receiving side is smaller than this angle, it will not be thrown.',
        ),
        ParamFieldInfo(
            "upperYRange",
            "Upper Height Range",
            True,
            float,
            'Do not throw unless the relative distance of the Y axis from the throwing side to the receiving side is smaller than this value',
        ),
        ParamFieldInfo(
            "lowerYRange",
            "Lower Height Range",
            True,
            float,
            'Do not throw unless the relative distance of the Y axis from the throwing side to the receiving side is smaller than this value',
        ),
        ParamFieldInfo(
            "diffAngMyToDef",
            "Angle Difference - To Defender",
            True,
            float,
            'The angle difference between the vector in front of you and the vector in the direction from you to the other party. If it is larger than this value, it will not be thrown',
        ),
        ParamFieldInfo(
            "throwTypeId",
            "Throw Type ID",
            True,
            int,
            'ID that identifies the type of throw (association with attack parameter)',
        ),
        ParamFieldInfo(
            "atkAnimId",
            "Attacker - Animation ID",
            True,
            int,
            'Set attack animation ID (linked to EzState)',
        ),
        ParamFieldInfo(
            "defAnimId",
            "Defender - Animation ID",
            True,
            int,
            'Set damage animation ID (linked to EzState)',
        ),
        ParamFieldInfo(
            "escHp",
            "Self Escape - HP",
            True,
            int,
            'Value that can withstand throwing through',
        ),
        ParamFieldInfo(
            "selfEscCycleTime",
            "Self Escape - Cycle Time",
            True,
            int,
            'Cycle time for self-throwing [ms]',
        ),
        ParamFieldInfo(
            "sphereCastRadiusRateTop",
            "Sphere Cast - Radius Rate Top",
            True,
            int,
            'Ratio of upper radius of sphere cast [80-> 0.8]',
        ),
        ParamFieldInfo(
            "sphereCastRadiusRateLow",
            "Sphere Cast - Radius Rate Low",
            True,
            int,
            'Spherecast lower radius ratio [80-> 0.8]',
        ),
        ParamFieldInfo(
            "PadType",
            "Operation Type",
            True,
            int,
            'Operation type',
        ),
        ParamFieldInfo(
            "AtkEnableState",
            "Attack Enable State",
            True,
            int,
            'Please set the state type that can be thrown on the throwing side',
        ),
        ParamFieldInfo(
            "throwFollowingType",
            "Throw Following Type",
            True,
            int,
            'How to follow the character possessed by Adsorbed Damipoli while throwing. * Follow-up period is controlled by TAE action',
        ),
        ParamFieldInfo(
            "pad2[1]",
            "pad",
            False,
            pad_field(1),
            'pad',
        ),
        ParamFieldInfo(
            "throwType",
            "Throw Type",
            True,
            int,
            'Type of throw',
        ),
        ParamFieldInfo(
            "selfEscCycleCnt",
            "Self Escape - Cycle Count",
            True,
            int,
            'Number of self-throwing cycles',
        ),
        ParamFieldInfo(
            "dmyHasChrDirType",
            "Character Throw - Dummy Poly Direction Type",
            True,
            int,
            'Direction of Damipoli possession character when throwing occurs',
        ),
        ParamFieldInfo(
            "isTurnAtker:1",
            "Throw can Side Turn",
            True,
            int,
            'Does the throwing side turn?',
        ),
        ParamFieldInfo(
            "isSkipWepCate:1",
            "Skip Attacker Weapon Category Check",
            True,
            int,
            "Do you want to skip the attacker's weapon category check?",
        ),
        ParamFieldInfo(
            "isSkipSphereCast:1",
            "Skip Sphere Cast",
            True,
            int,
            'Do you want to skip the sphere cast?',
        ),
        ParamFieldInfo(
            "isEnableCorrectPos_forThrowAdjust:1",
            "Enable Correct Position for Throw Adjustment",
            True,
            int,
            'If it is set to ��, the location of the throwing position will be the "position of the adsorption Damipoli that has returned to the positional relationship equivalent to the flat ground".',
        ),
        ParamFieldInfo(
            "isEnableThrowFollowingFallAssist:1",
            "Enable Throw Following Fall Assist",
            True,
            int,
            'Is the same treatment as the wall removal prevention applied to the fall prevention wall so that it does not fall from the step when the follow-up is released?',
        ),
        ParamFieldInfo(
            "isEnableThrowFollowingFeedback:1",
            "Enable Throw Following Feedback",
            True,
            int,
            'Do you want to return the character with the Adsorbed Damipoli when it comes in contact with a hit or fall prevention wall so that it does not look like it will get stuck in the middle wall or fall from a step?',
        ),
        ParamFieldInfo(
            "pad0:2",
            "pad",
            False,
            bit_pad_field(2),
            'pad',
        ),
        ParamFieldInfo(
            "atkSorbDmyId",
            "Attacker - Absorb Dummy ID",
            True,
            int,
            'Where on the throwing side should the receiving side be attracted?',
        ),
        ParamFieldInfo(
            "defSorbDmyId",
            "Defender - Absorb Dummy ID",
            True,
            int,
            'Where on the receiving side should the throwing side be adsorbed?',
        ),
        ParamFieldInfo(
            "Dist_start",
            "Backstab - Max Throw Distance ",
            True,
            float,
            'Only throw at a distance closer than this value [m] Used for throwing at the start of the Backstab',
        ),
        ParamFieldInfo(
            "DiffAngMin_start",
            "Backstab - Height Angle Difference - Min",
            True,
            float,
            'If the angle difference (Y-axis) between the throwing side and the receiving side is not larger than this angle, it will not be thrown. It is used for throwing at the start of the Backstab.',
        ),
        ParamFieldInfo(
            "DiffAngMax_start",
            "Backstab - Height Angle Difference - Max",
            True,
            float,
            'The angle difference (Y-axis) between the throwing side and the receiving side must be smaller than this angle to throw. Used for throwing at the start of the Backstab.',
        ),
        ParamFieldInfo(
            "upperYRange_start",
            "Backstab - Upper Height Range",
            True,
            float,
            'It will not be thrown unless the relative distance of the Y axis from the throwing side to the receiving side is smaller than this value. It is used for throwing at the start of the Backstab.',
        ),
        ParamFieldInfo(
            "lowerYRange_start",
            "Backstab - Lower Height Range",
            True,
            float,
            'It will not be thrown unless the relative distance of the Y axis from the throwing side to the receiving side is smaller than this value. It is used for throwing at the start of the Backstab.',
        ),
        ParamFieldInfo(
            "diffAngMyToDef_start",
            "Backstab - Angle Difference - To Defender",
            True,
            float,
            'The angle difference between the vector in front of you and the vector in the direction from you to the other party. If it is larger than this value, it will not be thrown. It will be used for throwing at the start of the Backstab.',
        ),
        ParamFieldInfo(
            "judgeRangeBasePosDmyId1",
            "Attacker - Throwing Range Judgment - Dummy Poly ID",
            True,
            int,
            'Damipoli that the thrower considers to be his position when calculating the throw range. If -1, the capsule origin',
        ),
        ParamFieldInfo(
            "judgeRangeBasePosDmyId2",
            "Defender - Throwing Range Judgment - Dummy Poly ID",
            True,
            int,
            'Damipoli that the thrower considers to be his position when calculating the throw range. If -1, the capsule origin',
        ),
        ParamFieldInfo(
            "adsrobModelPosInterpolationTime",
            "Absorb Model Position Interpolation Time",
            True,
            float,
            'After the capsule is adsorbed on Damipoli, the time it takes for the character model to interpolate and move to the position according to the throwing animation data (when 0 is set, the model position is not interpolated and playback starts immediately after adsorption with the positional relationship according to the animation data. Will be)',
        ),
        ParamFieldInfo(
            "throwFollowingEndEasingTime",
            "Throw Following End Easing Time",
            True,
            float,
            'Model position interpolation time at the end of tracking',
        ),
        ParamFieldInfo(
            "pad1[24]",
            "pad",
            False,
            pad_field(24),
            'pad',
        ),
    ],
}

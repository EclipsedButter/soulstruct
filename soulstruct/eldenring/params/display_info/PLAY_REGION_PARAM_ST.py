from soulstruct.base.params.utils import ParamFieldInfo, pad_field, bit_pad_field


PLAY_REGION_PARAM_ST = {
    "param_type": "PLAY_REGION_PARAM_ST",
    "file_name": "",  # TODO
    "nickname": "",  # TODO
    "fields": [
        ParamFieldInfo(
            "disableParam_NT:1",
            "Disable Param - Network Test",
            True,
            int,
            'Parameters marked with �� are excluded in the NT version package.',
        ),
        ParamFieldInfo(
            "disableParamReserve1:7",
            "Reserve for package output 1",
            False,
            bit_pad_field(7),
            'Reserve for package output 1',
        ),
        ParamFieldInfo(
            "disableParamReserve2[3]",
            "Reserve for package output 2",
            False,
            pad_field(3),
            'Reserve for package output 2',
        ),
        ParamFieldInfo(
            "matchAreaId",
            "Match Area ID",
            True,
            int,
            'Simple match area ID',
        ),
        ParamFieldInfo(
            "multiPlayStartLimitEventFlagId",
            "Multiplayer Start Limit - Event Flag ID",
            True,
            int,
            'Multiplayer start limit event flag ID',
        ),
        ParamFieldInfo(
            "otherDisableDistance",
            "Disable Intrusion if Other Ghost In Range",
            True,
            float,
            'Other distances that cannot be invaded by spirits. The intrusion position is searched for the intrusion points within the "other ghost invasion impossible distance" to the "other ghost invasion range upper limit" from the host position.',
        ),
        ParamFieldInfo(
            "pcPositionSaveLimitEventFlagId",
            "Player Position Save Limit - Event Flag ID",
            True,
            int,
            'PC position save restriction event flag ID (flag ON: PC position save valid flag OFF: PC position save invalid 0: PC position save always valid)',
        ),
        ParamFieldInfo(
            "bossAreaId",
            "Boss Area ID",
            True,
            int,
            'Areas with the same ID are treated as the same boss area.',
        ),
        ParamFieldInfo(
            "cultNpcWhiteGhostEntityId_byFree",
            "White Phantom Entity ID - Free Frame",
            True,
            int,
            "NPC White Spirit Summon Ritual Summon The beginning of the free frame ID used as the NPC's entity ID",
        ),
        ParamFieldInfo(
            "bMapGuradianRegion",
            "Is Map Guardian Region",
            True,
            int,
            'Whether to increase or decrease the frame of the map protection area',
        ),
        ParamFieldInfo(
            "bYellowCostumeRegion:1",
            "Is Yellow Monk Region",
            True,
            int,
            'Is it the old man sign area of yellow robe?',
        ),
        ParamFieldInfo(
            "multiPlayStartLimitEventFlagId_targetFlagState:1",
            "Target Flag State - Multiplayer Start Limit ID [1]",
            True,
            int,
            'Flag state that limits "multiplayer start restriction event flag ID"',
        ),
        ParamFieldInfo(
            "breakInLimitEventFlagId_1_targetFlagState:1",
            "Target Flag State - Invasion Start Limit ID [1]",
            True,
            int,
            'Flag state that limits "intrusion restriction event flag ID1"',
        ),
        ParamFieldInfo(
            "whiteSignLimitEventFlagId_1_targetFlagState:1",
            "Target Flag State - White Sign Start Limit ID [1]",
            True,
            int,
            'Flag state that limits "white sign restriction event flag ID1"',
        ),
        ParamFieldInfo(
            "redSignLimitEventFlagId_1_targetFlagState:1",
            "Target Flag State - Red Sign Start Limit ID [1]",
            True,
            int,
            'Flag state that limits "red sign limit event flag ID1"',
        ),
        ParamFieldInfo(
            "breakInLimitEventFlagId_2_targetFlagState:1",
            "Target Flag State - Invasion Start Limit ID [2]",
            True,
            int,
            'Flag state that limits "intrusion restriction event flag ID2"',
        ),
        ParamFieldInfo(
            "breakInLimitEventFlagId_3_targetFlagState:1",
            "Target Flag State - Invasion Start Limit ID [3]",
            True,
            int,
            'Flag state that limits "intrusion restriction event flag ID3"',
        ),
        ParamFieldInfo(
            "whiteSignLimitEventFlagId_2_targetFlagState:1",
            "Target Flag State - White Sign Start Limit ID [2]",
            True,
            int,
            'Flag state that limits "white sign restriction event flag ID2"',
        ),
        ParamFieldInfo(
            "warpItemUsePermitBonfireId_1",
            "Warp Item Usage Permitted - Bonfire ID [1]",
            True,
            int,
            'Bonfire entity ID1 used to determine whether to allow the use of warp items',
        ),
        ParamFieldInfo(
            "warpItemUsePermitBonfireId_2",
            "Warp Item Usage Permitted - Bonfire ID [2]",
            True,
            int,
            'Bonfire entity ID 2 used to determine permission to use warp items',
        ),
        ParamFieldInfo(
            "warpItemUsePermitBonfireId_3",
            "Warp Item Usage Permitted - Bonfire ID [3]",
            True,
            int,
            'Bonfire entity ID 3 used to determine permission to use warp items',
        ),
        ParamFieldInfo(
            "warpItemUsePermitBonfireId_4",
            "Warp Item Usage Permitted - Bonfire ID [4]",
            True,
            int,
            'Bonfire entity ID 4 used to determine permission to use warp items',
        ),
        ParamFieldInfo(
            "warpItemUsePermitBonfireId_5",
            "Warp Item Usage Permitted - Bonfire ID [5]",
            True,
            int,
            'Bonfire entity ID 5 used to determine permission to use warp items',
        ),
        ParamFieldInfo(
            "warpItemProhibitionEventFlagId_1",
            "Warp Item Prohibition - Event Flag ID [1]",
            True,
            int,
            'Event flag ID 1 to determine the prohibition of warp items. Warp item permission Higher priority than judgment by bonfire ID',
        ),
        ParamFieldInfo(
            "warpItemProhibitionEventFlagId_2",
            "Warp Item Prohibition - Event Flag ID [2]",
            True,
            int,
            'Event flag ID 2 to determine the prohibition of warp items. Warp item permission Higher priority than judgment by bonfire ID',
        ),
        ParamFieldInfo(
            "warpItemProhibitionEventFlagId_3",
            "Warp Item Prohibition - Event Flag ID [3]",
            True,
            int,
            'Event flag ID 3 to determine the prohibition of warp items. Warp item permission Higher priority than judgment by bonfire ID',
        ),
        ParamFieldInfo(
            "warpItemProhibitionEventFlagId_4",
            "Warp Item Prohibition - Event Flag ID [4]",
            True,
            int,
            'Event flag ID 4 to determine the prohibition of warp items. Warp item permission Higher priority than judgment by bonfire ID',
        ),
        ParamFieldInfo(
            "warpItemProhibitionEventFlagId_5",
            "Warp Item Prohibition - Event Flag ID [5]",
            True,
            int,
            'Event flag ID 5 to determine the prohibition of warp items. Warp item permission Higher priority than judgment by bonfire ID',
        ),
        ParamFieldInfo(
            "enableBloodstain:1",
            "Enable Bloodstain",
            True,
            int,
            'Effective bloodstain / death illusion',
        ),
        ParamFieldInfo(
            "enableBloodMessage:1",
            "Enable Blood Message",
            True,
            int,
            'Blood character valid',
        ),
        ParamFieldInfo(
            "enableGhost:1",
            "Enable Ghost",
            True,
            int,
            'Phantom effective',
        ),
        ParamFieldInfo(
            "dispMask00:1",
            "Display Mask M00",
            True,
            int,
            'Whether to display on map M00',
        ),
        ParamFieldInfo(
            "dispMask01:1",
            "Display Mask M01",
            True,
            int,
            'Whether to display on map M01',
        ),
        ParamFieldInfo(
            "whiteSignLimitEventFlagId_3_targetFlagState:1",
            "Target Flag State - White Sign Start Limit ID [3]",
            True,
            int,
            'Flag state that limits "white sign restriction event flag ID3"',
        ),
        ParamFieldInfo(
            "redSignLimitEventFlagId_2_targetFlagState:1",
            "Target Flag State - Red Sign Start Limit ID [2]",
            True,
            int,
            'Flag state that limits "red sign limit event flag ID2"',
        ),
        ParamFieldInfo(
            "redSignLimitEventFlagId_3_targetFlagState:1",
            "Target Flag State - Red Sign Start Limit ID [3]",
            True,
            int,
            'Flag state that limits "red sign limit event flag ID3"',
        ),
        ParamFieldInfo(
            "isAutoIntrudePoint:1",
            "Is Automatic Invasion Point",
            True,
            int,
            'Is it an intrusion point automatic generation? If it is set to ��, the intrusion position is searched by the automatically generated logic for the intrusion point.',
        ),
        ParamFieldInfo(
            "pad1:7",
            "pad1",
            False,
            bit_pad_field(7),
            '',
        ),
        ParamFieldInfo(
            "pad2[2]",
            "pad2",
            False,
            pad_field(2),
            '',
        ),
        ParamFieldInfo(
            "multiPlayHASHostLimitEventFlagId",
            "Block Yellow Monk Multiplayer - Event Flag ID",
            True,
            int,
            'Yellow Coat Host Restriction Event Flag: When this flag is turned on, multiplayer as a host of Yellow Coat is prohibited. It is assumed that the block clear flag will be inserted. 0: No limit',
        ),
        ParamFieldInfo(
            "otherMaxDistance",
            "Other Ghost Invasion Range - Max Limit",
            True,
            float,
            'Other ghost invasion range upper limit. The intrusion position is searched for the intrusion points within the "other ghost invasion impossible distance" to the "other ghost invasion range upper limit" from the host position.',
        ),
        ParamFieldInfo(
            "signPuddleOpenEventFlagId",
            "Summoning Pool Open - Event Flag ID",
            True,
            int,
            'Sign accumulation release event flag ID',
        ),
        ParamFieldInfo(
            "areaNo",
            "Map Area",
            True,
            int,
            'Area number (mXX_00_00_00). Data for specifying the display position in the map menu',
        ),
        ParamFieldInfo(
            "gridXNo",
            "Map Block",
            True,
            int,
            'Grid X number (m00_XX_00_00). Data for specifying the display position in the map menu',
        ),
        ParamFieldInfo(
            "gridZNo",
            "Map Region",
            True,
            int,
            'Grid Z number (m00_00_XX_00). Data for specifying the display position in the map menu',
        ),
        ParamFieldInfo(
            "pad4[1]",
            "pad4",
            False,
            pad_field(1),
            '',
        ),
        ParamFieldInfo(
            "posX",
            "Coordinate: X",
            True,
            float,
            'X coordinates (relative coordinates from the specified map). Data for specifying the display position in the map menu',
        ),
        ParamFieldInfo(
            "posY",
            "Coordinate: Y",
            True,
            float,
            'Y coordinates (relative coordinates from the specified map). Data for specifying the display position in the map menu. Not actually used, but keep XYZ aligned',
        ),
        ParamFieldInfo(
            "posZ",
            "Coordinate: Z",
            True,
            float,
            'Z coordinates (relative coordinates from the specified map). Data for specifying the display position in the map menu',
        ),
        ParamFieldInfo(
            "breakInLimitEventFlagId_1",
            "Invasion Restriction - Event Flag ID [1]",
            True,
            int,
            'Intrusion restriction event flag ID1',
        ),
        ParamFieldInfo(
            "whiteSignLimitEventFlagId_1",
            "Summon Restriction - Event Flag ID [1]",
            True,
            int,
            'White sign limit event flag ID1',
        ),
        ParamFieldInfo(
            "matchAreaSignCreateLimitEventFlagId",
            "Summoning Pool Restriction - Event Flag ID",
            True,
            int,
            'Sign accumulation registration restriction Event flag ID (Flag ON: Sign accumulation registration is permitted Flag OFF: Sign accumulation registration is prohibited 0: Sign accumulation registration is always permitted)',
        ),
        ParamFieldInfo(
            "signAimId_1",
            "Sign Aim ID [1]",
            True,
            int,
            'Multi-purpose ID to be displayed in the list when setting the purpose',
        ),
        ParamFieldInfo(
            "signAimId_2",
            "Sign Aim ID [2]",
            True,
            int,
            'Multi-purpose ID to be displayed in the list when setting the purpose',
        ),
        ParamFieldInfo(
            "signAimId_3",
            "Sign Aim ID [3]",
            True,
            int,
            'Multi-purpose ID to be displayed in the list when setting the purpose',
        ),
        ParamFieldInfo(
            "signAimId_4",
            "Sign Aim ID [4]",
            True,
            int,
            'Multi-purpose ID to be displayed in the list when setting the purpose',
        ),
        ParamFieldInfo(
            "signAimId_5",
            "Sign Aim ID [5]",
            True,
            int,
            'Multi-purpose ID to be displayed in the list when setting the purpose',
        ),
        ParamFieldInfo(
            "signAimId_6",
            "Sign Aim ID [6]",
            True,
            int,
            'Multi-purpose ID to be displayed in the list when setting the purpose',
        ),
        ParamFieldInfo(
            "signAimId_7",
            "Sign Aim ID [7]",
            True,
            int,
            'Multi-purpose ID to be displayed in the list when setting the purpose',
        ),
        ParamFieldInfo(
            "signAimId_8",
            "Sign Aim ID [8]",
            True,
            int,
            'Multi-purpose ID to be displayed in the list when setting the purpose',
        ),
        ParamFieldInfo(
            "redSignLimitEventFlagId_1",
            "Red Sign Limit - Event Flag ID [1]",
            True,
            int,
            'Red sign limit event flag ID1',
        ),
        ParamFieldInfo(
            "breakInLimitEventFlagId_2",
            "Invasion Limit - Event Flag ID [2]",
            True,
            int,
            'Intrusion restriction event flag ID2',
        ),
        ParamFieldInfo(
            "breakInLimitEventFlagId_3",
            "Invasion Limit - Event Flag ID [3]",
            True,
            int,
            'Intrusion restriction event flag ID3',
        ),
        ParamFieldInfo(
            "whiteSignLimitEventFlagId_2",
            "White Sign Limit - Event Flag ID [2]",
            True,
            int,
            'White sign limit event flag ID2',
        ),
        ParamFieldInfo(
            "whiteSignLimitEventFlagId_3",
            "White Sign Limit - Event Flag ID [3]",
            True,
            int,
            'White sign limit event flag ID3',
        ),
        ParamFieldInfo(
            "redSignLimitEventFlagId_2",
            "Red Sign Limit - Event Flag ID [2]",
            True,
            int,
            'Red sign limit event flag ID2',
        ),
        ParamFieldInfo(
            "redSignLimitEventFlagId_3",
            "Red Sign Limit - Event Flag ID [3]",
            True,
            int,
            'Red sign limit event flag ID3',
        ),
        ParamFieldInfo(
            "bossId_1",
            "Boss ID [1]",
            True,
            int,
            'Area boss ID. It is used to select the target boss when "Is the intrusion point automatically generated?" Is ��.',
        ),
        ParamFieldInfo(
            "bossId_2",
            "Boss ID [2]",
            True,
            int,
            'Area boss ID. It is used to select the target boss when "Is the intrusion point automatically generated?" Is ��.',
        ),
        ParamFieldInfo(
            "bossId_3",
            "Boss ID [3]",
            True,
            int,
            'Area boss ID. It is used to select the target boss when "Is the intrusion point automatically generated?" Is ��.',
        ),
        ParamFieldInfo(
            "bossId_4",
            "Boss ID [4]",
            True,
            int,
            'Area boss ID. It is used to select the target boss when "Is the intrusion point automatically generated?" Is ��.',
        ),
        ParamFieldInfo(
            "bossId_5",
            "Boss ID [5]",
            True,
            int,
            'Area boss ID. It is used to select the target boss when "Is the intrusion point automatically generated?" Is ��.',
        ),
        ParamFieldInfo(
            "bossId_6",
            "Boss ID [6]",
            True,
            int,
            'Area boss ID. It is used to select the target boss when "Is the intrusion point automatically generated?" Is ��.',
        ),
        ParamFieldInfo(
            "bossId_7",
            "Boss ID [7]",
            True,
            int,
            'Area boss ID. It is used to select the target boss when "Is the intrusion point automatically generated?" Is ��.',
        ),
        ParamFieldInfo(
            "bossId_8",
            "Boss ID [8]",
            True,
            int,
            'Area boss ID. It is used to select the target boss when "Is the intrusion point automatically generated?" Is ��.',
        ),
        ParamFieldInfo(
            "bossId_9",
            "Boss ID [9]",
            True,
            int,
            'Area boss ID. It is used to select the target boss when "Is the intrusion point automatically generated?" Is ��.',
        ),
        ParamFieldInfo(
            "bossId_10",
            "Boss ID [10]",
            True,
            int,
            'Area boss ID. It is used to select the target boss when "Is the intrusion point automatically generated?" Is ��.',
        ),
        ParamFieldInfo(
            "bossId_11",
            "Boss ID [11]",
            True,
            int,
            'Area boss ID. It is used to select the target boss when "Is the intrusion point automatically generated?" Is ��.',
        ),
        ParamFieldInfo(
            "bossId_12",
            "Boss ID [12]",
            True,
            int,
            'Area boss ID. It is used to select the target boss when "Is the intrusion point automatically generated?" Is ��.',
        ),
        ParamFieldInfo(
            "bossId_13",
            "Boss ID [13]",
            True,
            int,
            'Area boss ID. It is used to select the target boss when "Is the intrusion point automatically generated?" Is ��.',
        ),
        ParamFieldInfo(
            "bossId_14",
            "Boss ID [14]",
            True,
            int,
            'Area boss ID. It is used to select the target boss when "Is the intrusion point automatically generated?" Is ��.',
        ),
        ParamFieldInfo(
            "bossId_15",
            "Boss ID [15]",
            True,
            int,
            'Area boss ID. It is used to select the target boss when "Is the intrusion point automatically generated?" Is ��.',
        ),
        ParamFieldInfo(
            "bossId_16",
            "Boss ID [16]",
            True,
            int,
            'Area boss ID. It is used to select the target boss when "Is the intrusion point automatically generated?" Is ��.',
        ),
        ParamFieldInfo(
            "mapMenuUnlockEventId",
            "Map Menu Unlock - Event Flag ID",
            True,
            int,
            'Map display_event flag ID (0: always displayed). Only when this event flag is set, it will be displayed in a lively manner in the map menu.',
        ),
        ParamFieldInfo(
            "pad5[32]",
            "pad5",
            False,
            pad_field(32),
            '',
        ),
    ],
}

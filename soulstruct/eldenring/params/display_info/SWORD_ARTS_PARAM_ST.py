from soulstruct.base.params.utils import ParamFieldInfo, pad_field, bit_pad_field


SWORD_ARTS_PARAM_ST = {
    "param_type": "SWORD_ARTS_PARAM_ST",
    "file_name": "",  # TODO
    "nickname": "",  # TODO
    "fields": [
        ParamFieldInfo(
            "disableParam_NT:1",
            "Disable Param - Network Test",
            True,
            int,
            'Parameters marked with �� are excluded in the NT version package.',
        ),
        ParamFieldInfo(
            "disableParamReserve1:7",
            "Reserve for package output 1",
            False,
            bit_pad_field(7),
            'Reserve for package output 1',
        ),
        ParamFieldInfo(
            "disableParamReserve2[3]",
            "Reserve for package output 2",
            False,
            pad_field(3),
            'Reserve for package output 2',
        ),
        ParamFieldInfo(
            "swordArtsType",
            "Sword Arts Type",
            True,
            int,
            'Offset for TAE animation. 0 is a600. To pass to the behavior script to determine which swashbuckler',
        ),
        ParamFieldInfo(
            "artsSpeedType",
            "Arts Speed Type",
            True,
            int,
            'Which cancellation timing do you see? 0: Normal (left hand attack) / 1: Early / 2: Slow',
        ),
        ParamFieldInfo(
            "refStatus",
            "Reference Status Type",
            True,
            int,
            'Which system of arts points to refer to',
        ),
        ParamFieldInfo(
            "isRefRightArts:1",
            "Is Right-hand Arts Reference",
            True,
            int,
            'When set to the arts of the left-handed weapon, the arts of the right-handed weapon are displayed in FE. Assumed to be used for "weapon maneuvers" etc.',
        ),
        ParamFieldInfo(
            "isGrayoutLeftHand:1",
            "Is Greyout Left-hand",
            True,
            int,
            'Whether to gray out when displaying the arts name of the left hand (one-handed)',
        ),
        ParamFieldInfo(
            "isGrayoutRightHand:1",
            "Is Greyout Right-hand",
            True,
            int,
            'Whether to gray out when displaying the arts name of the right hand (one-handed)',
        ),
        ParamFieldInfo(
            "isGrayoutBothHand:1",
            "Is Greyout Both-hand",
            True,
            int,
            'Whether to gray out when displaying the arts name of both hands',
        ),
        ParamFieldInfo(
            "reserve2:4",
            "Reserved area",
            False,
            bit_pad_field(4),
            '',
        ),
        ParamFieldInfo(
            "usePoint_L1",
            "Arts Points - L1",
            True,
            int,
            'Points to spend when putting out arts by L1',
        ),
        ParamFieldInfo(
            "usePoint_L2",
            "Arts Points - L2",
            True,
            int,
            'Points to spend when putting out arts by L2',
        ),
        ParamFieldInfo(
            "usePoint_R1",
            "Arts Points - R1",
            True,
            int,
            'Points to spend when putting out arts by R1',
        ),
        ParamFieldInfo(
            "usePoint_R2",
            "Arts Points - R2",
            True,
            int,
            'Points to spend when putting out arts by R2',
        ),
        ParamFieldInfo(
            "textId",
            "Text ID",
            True,
            int,
            'Text ID for arts description',
        ),
        ParamFieldInfo(
            "useMagicPoint_L1",
            "FP Consumption - L1",
            True,
            int,
            'MP consumed when issuing arts by L1',
        ),
        ParamFieldInfo(
            "useMagicPoint_L2",
            "FP Consumption - L2",
            True,
            int,
            'MP consumed when issuing arts by L2',
        ),
        ParamFieldInfo(
            "useMagicPoint_R1",
            "FP Consumption - R1",
            True,
            int,
            'MP consumed when issuing arts by R1',
        ),
        ParamFieldInfo(
            "useMagicPoint_R2",
            "FP Consumption - R2",
            True,
            int,
            'MP consumed when issuing arts by R2',
        ),
        ParamFieldInfo(
            "shieldIconType",
            "Shield Icon Type",
            True,
            int,
            'If you do not overwrite it, the icon will be displayed based on the swashbuckler ID of the weapon para.',
        ),
        ParamFieldInfo(
            "pad[1]",
            "pad",
            False,
            pad_field(1),
            '',
        ),
        ParamFieldInfo(
            "iconId",
            "Icon ID",
            True,
            int,
            'ID of the icon displayed in FE etc.',
        ),
        ParamFieldInfo(
            "aiUsageId",
            "AI Usage Judgment ID",
            True,
            int,
            'AI usage judgment ID',
        ),
    ],
}

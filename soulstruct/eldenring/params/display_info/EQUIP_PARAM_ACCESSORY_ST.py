from soulstruct.base.params.utils import ParamFieldInfo, pad_field, bit_pad_field


EQUIP_PARAM_ACCESSORY_ST = {
    "param_type": "EQUIP_PARAM_ACCESSORY_ST",
    "file_name": "",  # TODO
    "nickname": "",  # TODO
    "fields": [
        ParamFieldInfo(
            "disableParam_NT:1",
            "Disable Param - Network Test",
            True,
            int,
            'Parameters marked with �� are excluded in the NT version package.',
        ),
        ParamFieldInfo(
            "disableParamReserve1:7",
            "Reserve for package output 1",
            False,
            bit_pad_field(7),
            'Reserve for package output 1',
        ),
        ParamFieldInfo(
            "disableParamReserve2[3]",
            "Reserve for package output 2",
            False,
            pad_field(3),
            'Reserve for package output 2',
        ),
        ParamFieldInfo(
            "refId",
            "Reference ID",
            True,
            int,
            'ID called from decorations',
        ),
        ParamFieldInfo(
            "sfxVariationId",
            "SFX Variation ID",
            True,
            int,
            'Specify SFX variation (used to identify SFX in combination with TimeActEditor ID)',
        ),
        ParamFieldInfo(
            "weight",
            "Weight",
            True,
            float,
            'Weight [kg]',
        ),
        ParamFieldInfo(
            "behaviorId",
            "Behavior ID",
            True,
            int,
            'Action ID (= Skill)',
        ),
        ParamFieldInfo(
            "basicPrice",
            "Basic Price",
            True,
            int,
            'Basic price',
        ),
        ParamFieldInfo(
            "sellValue",
            "Sell Value",
            True,
            int,
            'Selling price',
        ),
        ParamFieldInfo(
            "sortId",
            "Sort ID",
            True,
            int,
            '',
        ),
        ParamFieldInfo(
            "qwcId",
            "QWC ID",
            True,
            int,
            '',
        ),
        ParamFieldInfo(
            "equipModelId",
            "Equip Model ID",
            True,
            int,
            'Equipment model number',
        ),
        ParamFieldInfo(
            "iconId",
            "Icon ID",
            True,
            int,
            'Menu icon ID',
        ),
        ParamFieldInfo(
            "shopLv",
            "Shop Level",
            True,
            int,
            'Level that can be sold at the store',
        ),
        ParamFieldInfo(
            "trophySGradeId",
            "Achievement Grade ID",
            True,
            int,
            '',
        ),
        ParamFieldInfo(
            "trophySeqId",
            "Achievement Sequential ID",
            True,
            int,
            'Trophy SEQ number',
        ),
        ParamFieldInfo(
            "equipModelCategory",
            "Equip Model Category",
            True,
            int,
            'Equipment model type',
        ),
        ParamFieldInfo(
            "equipModelGender",
            "Equip Model Gender",
            True,
            int,
            'Gender of equipment model',
        ),
        ParamFieldInfo(
            "accessoryCategory",
            "Accessory Type",
            True,
            int,
            'Armor category',
        ),
        ParamFieldInfo(
            "refCategory",
            "Reference Type",
            True,
            int,
            '�� ID category [Attack, Projectile, Special]',
        ),
        ParamFieldInfo(
            "spEffectCategory",
            "SpEffect Category",
            True,
            int,
            'Since there are effects (enchantment weapons, etc.) whose parameters fluctuate depending on skills, magic, items, etc., set each action so that the determined effect can correspond to the effect such as "power up only weapon attack". Set "None" for items that do not need to be set, such as varistor.\n - �X�L����A���@�A�A�C�e���ȂǂŁA�p�����[�^���ϓ�������ʁi�G���`�����g�E�F�|���Ȃǁj������̂ŁA���肵�����ʂ��A�u����U���݂̂��p���[�A�b�v����v�Ƃ��������ʂɑΉ��ł���悤�ɍs�����Ƃɐݒ肷��o���X�^�ȂǁA�ݒ�̕K�v�̂Ȃ����̂́u�Ȃ��v��ݒ肷��\n',
        ),
        ParamFieldInfo(
            "sortGroupId",
            "Sort Group ID",
            True,
            int,
            'Sort item type ID. In the sort "Item type order", the same ID is displayed together as the same group.',
        ),
        ParamFieldInfo(
            "vagrantItemLotId",
            "Vagrant Item Lot ID",
            True,
            int,
            '-1: No vagrant 0: No lottery 1 ~: With lottery',
        ),
        ParamFieldInfo(
            "vagrantBonusEneDropItemLotId",
            "Vagrant Bonus Item Lot ID",
            True,
            int,
            '-1: No drop 0: No lottery 1 ~: With lottery',
        ),
        ParamFieldInfo(
            "vagrantItemEneDropItemLotId",
            "Vagrant Enemy Item Lot ID",
            True,
            int,
            '-1: No drop 0: No lottery 1 ~: With lottery',
        ),
        ParamFieldInfo(
            "isDeposit:1",
            "Is Depositable",
            True,
            int,
            'Can you deposit it in the warehouse?',
        ),
        ParamFieldInfo(
            "isEquipOutBrake:1",
            "Is Destroyed on Unequip",
            True,
            int,
            'Will it break when equipped and removed?',
        ),
        ParamFieldInfo(
            "disableMultiDropShare:1",
            "Is Dropping Disabled in Multiplayer",
            True,
            int,
            'Is multi-drop sharing prohibited?',
        ),
        ParamFieldInfo(
            "isDiscard:1",
            "Is Discardable",
            True,
            int,
            'Can you throw away the item? TRUE = thrown away',
        ),
        ParamFieldInfo(
            "isDrop:1",
            "Is Droppable",
            True,
            int,
            'Can I put the item on the spot? TRUE = can be placed',
        ),
        ParamFieldInfo(
            "showLogCondType:1",
            "Item Acquisition Log Condition Type",
            True,
            int,
            'Whether to display in the item acquisition log when acquiring the item (not entered: ��)',
        ),
        ParamFieldInfo(
            "showDialogCondType:2",
            "Item Acquisition Dialog Condition Type",
            True,
            int,
            'Whether to display it in the item acquisition dialog when acquiring an item (not entered: new only)',
        ),
        ParamFieldInfo(
            "rarity",
            "Rarity",
            True,
            int,
            'Rarity used in item acquisition logs',
        ),
        ParamFieldInfo(
            "pad2[2]",
            "pad",
            False,
            pad_field(2),
            '(Old log icon ID)',
        ),
        ParamFieldInfo(
            "saleValue",
            "Sale Price",
            True,
            int,
            'Selling price',
        ),
        ParamFieldInfo(
            "accessoryGroup",
            "Accessory Group",
            True,
            int,
            'Items of the same group cannot be equipped at the same time',
        ),
        ParamFieldInfo(
            "pad3[1]",
            "pad",
            False,
            pad_field(1),
            'pad',
        ),
        ParamFieldInfo(
            "compTrophySedId",
            "Number of Completed Achievement ID",
            True,
            int,
            'SEQ number of complete trophy',
        ),
        ParamFieldInfo(
            "residentSpEffectId1",
            "SpEffect ID [1]",
            True,
            int,
            'Resident special effect ID1',
        ),
        ParamFieldInfo(
            "residentSpEffectId2",
            "SpEffect ID [2]",
            True,
            int,
            'Resident special effect ID2',
        ),
        ParamFieldInfo(
            "residentSpEffectId3",
            "SpEffect ID [3]",
            True,
            int,
            'Resident special effect ID3',
        ),
        ParamFieldInfo(
            "residentSpEffectId4",
            "SpEffect ID [4]",
            True,
            int,
            'Resident special effect ID4',
        ),
        ParamFieldInfo(
            "pad1[4]",
            "pad",
            False,
            pad_field(4),
            'pad',
        ),
    ],
}

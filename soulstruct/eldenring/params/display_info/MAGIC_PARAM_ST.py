from soulstruct.base.params.utils import ParamFieldInfo, pad_field, bit_pad_field


MAGIC_PARAM_ST = {
    "param_type": "MAGIC_PARAM_ST",
    "file_name": "",  # TODO
    "nickname": "",  # TODO
    "fields": [
        ParamFieldInfo(
            "disableParam_NT:1",
            "Disable Param - Network Test",
            True,
            int,
            'Parameters marked with �� are excluded in the NT version package.',
        ),
        ParamFieldInfo(
            "disableParamReserve1:7",
            "Reserve for package output 1",
            False,
            bit_pad_field(7),
            'Reserve for package output 1',
        ),
        ParamFieldInfo(
            "disableParamReserve2[3]",
            "Reserve for package output 2",
            False,
            pad_field(3),
            'Reserve for package output 2',
        ),
        ParamFieldInfo(
            "yesNoDialogMessageId",
            "Dialog Message ID",
            True,
            int,
            'Message ID of Yes / No dialog issued when using magic',
        ),
        ParamFieldInfo(
            "limitCancelSpEffectId",
            "Ignore Usage Restriction - SpEffect ID",
            True,
            int,
            'Usage restrictions can be ignored when the specified special effect ID is activated',
        ),
        ParamFieldInfo(
            "sortId",
            "Sort ID",
            True,
            int,
            'Sort ID (-1: Do not collect)',
        ),
        ParamFieldInfo(
            "requirementLuck",
            "Requirement: ARC",
            True,
            int,
            "Can't be equipped without more PC luck",
        ),
        ParamFieldInfo(
            "aiNotifyType",
            "AI Interrupt Type",
            True,
            int,
            'AI interrupt occurs in act ("AI notification when magic is activated")',
        ),
        ParamFieldInfo(
            "mp",
            "FP Consumption - Default",
            True,
            int,
            'MP consumption',
        ),
        ParamFieldInfo(
            "stamina",
            "Stamina Consumption - Default",
            True,
            int,
            'Consumption stamina',
        ),
        ParamFieldInfo(
            "iconId",
            "Icon ID",
            True,
            int,
            'Specify icon> For menu',
        ),
        ParamFieldInfo(
            "behaviorId",
            "Behavior ID",
            True,
            int,
            'Set the action ID',
        ),
        ParamFieldInfo(
            "mtrlItemId",
            "Material Item ID",
            True,
            int,
            'Item ID required for purchase',
        ),
        ParamFieldInfo(
            "replaceMagicId",
            "Replace Magic ID",
            True,
            int,
            'ID to be replaced when the state change matches (-1: invalid)',
        ),
        ParamFieldInfo(
            "maxQuantity",
            "Number of Uses",
            True,
            int,
            'Number per piece (-1: infinity)',
        ),
        ParamFieldInfo(
            "refCategory1",
            "Reference Category [1]",
            True,
            int,
            'Call ID category [Attack, Projectile, Special Effects]',
        ),
        ParamFieldInfo(
            "overDexterity",
            "Dexterity over Start Value",
            True,
            int,
            'Skill over start value',
        ),
        ParamFieldInfo(
            "refCategory2",
            "Reference Category [2]",
            True,
            int,
            'Call ID category [Attack, Projectile, Special Effects]',
        ),
        ParamFieldInfo(
            "slotLength",
            "Slot Usage",
            True,
            int,
            'Number of slots required for equipment> For menu',
        ),
        ParamFieldInfo(
            "requirementIntellect",
            "Requirement: INT",
            True,
            int,
            "Can't be equipped without more PC intelligence",
        ),
        ParamFieldInfo(
            "requirementFaith",
            "Requirement: FTH",
            True,
            int,
            'It cannot be equipped without the power of the PC any more.',
        ),
        ParamFieldInfo(
            "analogDexterityMin",
            "Casting Speed - DEX Start Range",
            True,
            int,
            'Motion cancel analog: Minimum skill value',
        ),
        ParamFieldInfo(
            "analogDexterityMax",
            "Casting Speed - DEX End Range",
            True,
            int,
            'Motion cancel analog: Maximum skill value',
        ),
        ParamFieldInfo(
            "ezStateBehaviorType",
            "Magic School Type",
            True,
            int,
            'Used for sorting> For menu',
        ),
        ParamFieldInfo(
            "refCategory3",
            "Reference Category [3]",
            True,
            int,
            'Call ID category [Attack, Projectile, Special Effects]',
        ),
        ParamFieldInfo(
            "spEffectCategory",
            "SpEffect Category",
            True,
            int,
            'Since there are effects (enchantment weapons, etc.) whose parameters fluctuate depending on skills, magic, items, etc., set each action so that the determined effect can correspond to the effect such as "power up only weapon attack". Set "None" for items that do not need to be set, such as varistor.',
        ),
        ParamFieldInfo(
            "refType",
            "Motion Category",
            True,
            int,
            'Specify motion> For EzState',
        ),
        ParamFieldInfo(
            "opmeMenuType",
            "Open Menu Type",
            True,
            int,
            'Menu type to be displayed when using magic',
        ),
        ParamFieldInfo(
            "refCategory4",
            "Reference Category [4]",
            True,
            int,
            'Call ID category [Attack, Projectile, Special Effects]',
        ),
        ParamFieldInfo(
            "hasSpEffectType",
            "Has SpEffect Type",
            True,
            int,
            'Specify the state change that needs to replace the magic ID',
        ),
        ParamFieldInfo(
            "replaceCategory",
            "Replace Category",
            True,
            int,
            'Additional conditions when replacing the magic ID',
        ),
        ParamFieldInfo(
            "useLimitCategory",
            "Use Limit Category",
            True,
            int,
            'Specified to control availability by special effects',
        ),
        ParamFieldInfo(
            "vowType0:1",
            "Vow Type [0]",
            True,
            int,
            'Pledge 0',
        ),
        ParamFieldInfo(
            "vowType1:1",
            "Vow Type [1]",
            True,
            int,
            'Pledge 1',
        ),
        ParamFieldInfo(
            "vowType2:1",
            "Vow Type [2]",
            True,
            int,
            'Pledge 2',
        ),
        ParamFieldInfo(
            "vowType3:1",
            "Vow Type [3]",
            True,
            int,
            'Pledge 3',
        ),
        ParamFieldInfo(
            "vowType4:1",
            "Vow Type [4]",
            True,
            int,
            'Pledge 4',
        ),
        ParamFieldInfo(
            "vowType5:1",
            "Vow Type [5]",
            True,
            int,
            'Pledge 5',
        ),
        ParamFieldInfo(
            "vowType6:1",
            "Vow Type [6]",
            True,
            int,
            'Pledge 6',
        ),
        ParamFieldInfo(
            "vowType7:1",
            "Vow Type [7]",
            True,
            int,
            'Pledge 7',
        ),
        ParamFieldInfo(
            "enable_multi:1",
            "Allow in Multiplayer",
            True,
            int,
            'Can it be used in multi? Can be used for both single and multi',
        ),
        ParamFieldInfo(
            "enable_multi_only:1",
            "Allow only in Multiplayer",
            True,
            int,
            'Is it only for multi? It cannot be used when it is a single. It can be used when it is multi.',
        ),
        ParamFieldInfo(
            "isEnchant:1",
            "Is Weapon Enchantment",
            True,
            int,
            'Is it magic to enchant?',
        ),
        ParamFieldInfo(
            "isShieldEnchant:1",
            "Is Shield Enchantment",
            True,
            int,
            'Is it magic to enchant guards and shields?',
        ),
        ParamFieldInfo(
            "enable_live:1",
            "Enable Live",
            True,
            int,
            'Can surviving characters be used?',
        ),
        ParamFieldInfo(
            "enable_gray:1",
            "Enable Gray",
            True,
            int,
            'Can gray characters be used?',
        ),
        ParamFieldInfo(
            "enable_white:1",
            "Enable White",
            True,
            int,
            'Can white ghost characters be used?',
        ),
        ParamFieldInfo(
            "enable_black:1",
            "Enable Black",
            True,
            int,
            'Can black ghost characters be used?',
        ),
        ParamFieldInfo(
            "disableOffline:1",
            "Disable Offline",
            True,
            int,
            'Is it unavailable offline?',
        ),
        ParamFieldInfo(
            "castResonanceMagic:1",
            "Cast Resonance Magic",
            True,
            int,
            'Do you deliver resonance magic?',
        ),
        ParamFieldInfo(
            "isValidTough_ProtSADmg:1",
            "Is Toughness Perfomed if Poise is Initial Value",
            True,
            int,
            'Whether the toughness calculation is performed even if the armor SA is the initial value. Check the toughness specification .xlsx for details',
        ),
        ParamFieldInfo(
            "isWarpMagic:1",
            "Is Blocked by Warp Prohibition Effect",
            True,
            int,
            'Is it magic to warp? Magic with a check mark here is prohibited by the special effect "Warp Prohibition".',
        ),
        ParamFieldInfo(
            "enableRiding:1",
            "Usable while Riding",
            True,
            int,
            'Can it be used while riding?',
        ),
        ParamFieldInfo(
            "disableRiding:1",
            "Not Usable while Riding",
            True,
            int,
            'Is it prohibited to use while not riding?',
        ),
        ParamFieldInfo(
            "isUseNoAttackRegion:1",
            "Usable in No Attack Region",
            True,
            int,
            'Can it be used in an attack-prohibited area?',
        ),
        ParamFieldInfo(
            "pad_1:1",
            "pading",
            False,
            bit_pad_field(1),
            '',
        ),
        ParamFieldInfo(
            "vowType8:1",
            "Vow Type [8]",
            True,
            int,
            'Pledge 8',
        ),
        ParamFieldInfo(
            "vowType9:1",
            "Vow Type [9]",
            True,
            int,
            'Pledge 9',
        ),
        ParamFieldInfo(
            "vowType10:1",
            "Vow Type [10]",
            True,
            int,
            'Pledge 10',
        ),
        ParamFieldInfo(
            "vowType11:1",
            "Vow Type [11]",
            True,
            int,
            'Pledge 11',
        ),
        ParamFieldInfo(
            "vowType12:1",
            "Vow Type [12]",
            True,
            int,
            'Pledge 12',
        ),
        ParamFieldInfo(
            "vowType13:1",
            "Vow Type [13]",
            True,
            int,
            'Pledge 13',
        ),
        ParamFieldInfo(
            "vowType14:1",
            "Vow Type [14]",
            True,
            int,
            'Pledge 14',
        ),
        ParamFieldInfo(
            "vowType15:1",
            "Vow Type [15]",
            True,
            int,
            'Pledge 15',
        ),
        ParamFieldInfo(
            "castSfxId",
            "SFX ID - Cast",
            True,
            int,
            'SFXID during magical chanting',
        ),
        ParamFieldInfo(
            "fireSfxId",
            "SFX ID - Fire",
            True,
            int,
            'SFX ID when magic is activated',
        ),
        ParamFieldInfo(
            "effectSfxId",
            "SFX ID - Effect",
            True,
            int,
            'SFXID during magic effect',
        ),
        ParamFieldInfo(
            "toughnessCorrectRate",
            "Toughness Correction",
            True,
            float,
            'It is a magnification that corrects the basic value of toughness.',
        ),
        ParamFieldInfo(
            "ReplacementStatusType",
            "Replacement Status Type",
            True,
            int,
            'Replacement status type',
        ),
        ParamFieldInfo(
            "ReplacementStatus1",
            "Replacement Threshold [1]",
            True,
            int,
            'Replacement status value 1',
        ),
        ParamFieldInfo(
            "ReplacementStatus2",
            "Replacement Threshold [2]",
            True,
            int,
            'Replacement status value 2',
        ),
        ParamFieldInfo(
            "ReplacementStatus3",
            "Replacement Threshold [3]",
            True,
            int,
            'Replacement status value 3',
        ),
        ParamFieldInfo(
            "ReplacementStatus4",
            "Replacement Threshold [4]",
            True,
            int,
            'Replacement status value 4',
        ),
        ParamFieldInfo(
            "refCategory5",
            "Reference Category [5]",
            True,
            int,
            'Call ID category [Attack, Projectile, Special Effects]',
        ),
        ParamFieldInfo(
            "consumeSA",
            "Poise Consumption",
            True,
            int,
            'SA consumption [normal / reservoir]',
        ),
        ParamFieldInfo(
            "ReplacementMagic1",
            "Replacement Magic ID [1]",
            True,
            int,
            'Replacement ID1',
        ),
        ParamFieldInfo(
            "ReplacementMagic2",
            "Replacement Magic ID [2]",
            True,
            int,
            'Replacement ID2',
        ),
        ParamFieldInfo(
            "ReplacementMagic3",
            "Replacement Magic ID [3]",
            True,
            int,
            'Replacement ID3',
        ),
        ParamFieldInfo(
            "ReplacementMagic4",
            "Replacement Magic ID [4]",
            True,
            int,
            'Replacement ID 4',
        ),
        ParamFieldInfo(
            "mp_charge",
            "FP Consumption - Charged",
            True,
            int,
            'MP consumption [reservoir]',
        ),
        ParamFieldInfo(
            "stamina_charge",
            "Stamina Consumption - Charged",
            True,
            int,
            'Consumption stamina [reservoir]',
        ),
        ParamFieldInfo(
            "createLimitGroupId",
            "Create Limit Group ID",
            True,
            int,
            'If it is 0, it is unused. Check the number of bullets created for the specified group Id, and if the upper limit is reached, you will not be able to use magic.',
        ),
        ParamFieldInfo(
            "refCategory6",
            "Reference Category [6]",
            True,
            int,
            'Call ID category [Attack, Projectile, Special Effects]',
        ),
        ParamFieldInfo(
            "subCategory1",
            "Conditional Category [1]",
            True,
            int,
            'Subcategory 1',
        ),
        ParamFieldInfo(
            "subCategory2",
            "Conditional Category [2]",
            True,
            int,
            'Subcategory 2',
        ),
        ParamFieldInfo(
            "refCategory7",
            "Reference Category [7]",
            True,
            int,
            'Call ID category [Attack, Projectile, Special Effects]',
        ),
        ParamFieldInfo(
            "refCategory8",
            "Reference Category [8]",
            True,
            int,
            'Call ID category [Attack, Projectile, Special Effects]',
        ),
        ParamFieldInfo(
            "refCategory9",
            "Reference Category [9]",
            True,
            int,
            'Call ID category [Attack, Projectile, Special Effects]',
        ),
        ParamFieldInfo(
            "refCategory10",
            "Reference Category [10]",
            True,
            int,
            'Call ID category [Attack, Projectile, Special Effects]',
        ),
        ParamFieldInfo(
            "refId1",
            "Reference ID [1]",
            True,
            int,
            'ID called from magic',
        ),
        ParamFieldInfo(
            "refId2",
            "Reference ID [2]",
            True,
            int,
            'ID called from magic',
        ),
        ParamFieldInfo(
            "refId3",
            "Reference ID [3]",
            True,
            int,
            'ID called from magic',
        ),
        ParamFieldInfo(
            "aiUseJudgeId",
            "AI Usage Judgment ID",
            True,
            int,
            'AI usage judgment ID',
        ),
        ParamFieldInfo(
            "refId4",
            "Reference ID [4]",
            True,
            int,
            'ID called from magic',
        ),
        ParamFieldInfo(
            "refId5",
            "Reference ID [5]",
            True,
            int,
            'ID called from magic',
        ),
        ParamFieldInfo(
            "refId6",
            "Reference ID [6]",
            True,
            int,
            'ID called from magic',
        ),
        ParamFieldInfo(
            "refId7",
            "Reference ID [7]",
            True,
            int,
            'ID called from magic',
        ),
        ParamFieldInfo(
            "refId8",
            "Reference ID [8]",
            True,
            int,
            'ID called from magic',
        ),
        ParamFieldInfo(
            "refId9",
            "Reference ID [9]",
            True,
            int,
            'ID called from magic',
        ),
        ParamFieldInfo(
            "refId10",
            "Reference ID [10]",
            True,
            int,
            'ID called from magic',
        ),
        ParamFieldInfo(
            "consumeType1",
            "Consumption Type [1]",
            True,
            int,
            'Consumption type',
        ),
        ParamFieldInfo(
            "consumeType2",
            "Consumption Type [2]",
            True,
            int,
            'Consumption type',
        ),
        ParamFieldInfo(
            "consumeType3",
            "Consumption Type [3]",
            True,
            int,
            'Consumption type',
        ),
        ParamFieldInfo(
            "consumeType4",
            "Consumption Type [4]",
            True,
            int,
            'Consumption type',
        ),
        ParamFieldInfo(
            "consumeType5",
            "Consumption Type [5]",
            True,
            int,
            'Consumption type',
        ),
        ParamFieldInfo(
            "consumeType6",
            "Consumption Type [6]",
            True,
            int,
            'Consumption type',
        ),
        ParamFieldInfo(
            "consumeType7",
            "Consumption Type [7]",
            True,
            int,
            'Consumption type',
        ),
        ParamFieldInfo(
            "consumeType8",
            "Consumption Type [8]",
            True,
            int,
            'Consumption type',
        ),
        ParamFieldInfo(
            "consumeType9",
            "Consumption Type [9]",
            True,
            int,
            'Consumption type',
        ),
        ParamFieldInfo(
            "consumeType10",
            "Consumption Type [10]",
            True,
            int,
            'Consumption type',
        ),
        ParamFieldInfo(
            "consumeLoopMP_forMenu",
            "FP Consumption Loop - For Menu Display",
            True,
            int,
            'MP consumption for menu supplement display',
        ),
        ParamFieldInfo(
            "pad[8]",
            "PAD12",
            False,
            pad_field(8),
            'PAD12',
        ),
    ],
}

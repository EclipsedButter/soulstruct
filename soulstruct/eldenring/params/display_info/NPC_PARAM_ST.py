from soulstruct.base.params.utils import ParamFieldInfo, pad_field, bit_pad_field


NPC_PARAM_ST = {
    "param_type": "NPC_PARAM_ST",
    "file_name": "",  # TODO
    "nickname": "",  # TODO
    "fields": [
        ParamFieldInfo(
            "disableParam_NT:1",
            "Disable Param - Network Test",
            True,
            int,
            'Parameters marked with �� are excluded in the NT version package.',
        ),
        ParamFieldInfo(
            "disableParamReserve1:7",
            "Reserve for package output 1",
            False,
            bit_pad_field(7),
            'Reserve for package output 1',
        ),
        ParamFieldInfo(
            "disableParamReserve2[3]",
            "Reserve for package output 2",
            False,
            pad_field(3),
            'Reserve for package output 2',
        ),
        ParamFieldInfo(
            "behaviorVariationId",
            "Behavior Variation ID",
            True,
            int,
            'Variation ID used when calculating the action ID.',
        ),
        ParamFieldInfo(
            "resistCorrectId_poison",
            "Resist Correct: Poison",
            True,
            int,
            'When the abnormal condition is activated, the maximum value is temporarily changed by using the set value of the abnormal condition resistance correction parameter.',
        ),
        ParamFieldInfo(
            "nameId",
            "Name ID",
            True,
            int,
            'NPC Name Message Parameter ID',
        ),
        ParamFieldInfo(
            "turnVellocity",
            "Turn Velocity",
            True,
            float,
            'Rotational speed [degrees / second] that can turn in 1 second.',
        ),
        ParamFieldInfo(
            "hitHeight",
            "Capsule Height",
            True,
            float,
            'The height of the capsule per character.',
        ),
        ParamFieldInfo(
            "hitRadius",
            "Capsule Radius",
            True,
            float,
            'Radius of capsule per character.',
        ),
        ParamFieldInfo(
            "weight",
            "Weight",
            True,
            int,
            'weight.',
        ),
        ParamFieldInfo(
            "hitYOffset",
            "Display Position - Height Offset",
            True,
            float,
            'Offset of the model display position in the Y (height) direction. It can be floated from the hit position.',
        ),
        ParamFieldInfo(
            "hp",
            "Base HP",
            True,
            int,
            'Death grace.',
        ),
        ParamFieldInfo(
            "mp",
            "Base FP",
            True,
            int,
            'Magic usage.',
        ),
        ParamFieldInfo(
            "getSoul",
            "Base Runes",
            True,
            int,
            'The amount of soul that a character can get at the time of death.',
        ),
        ParamFieldInfo(
            "itemLotId_enemy",
            "Enemy Itemlot ID",
            True,
            int,
            'Specify the lottery ID_for enemies of the item to be acquired at the time of death. Please set only one of them.',
        ),
        ParamFieldInfo(
            "itemLotId_map",
            "Map Itemlot ID",
            True,
            int,
            'Specify for the lottery ID_map of the item to be acquired at the time of death. Please set only one of them.',
        ),
        ParamFieldInfo(
            "maxAnkleRollAngle",
            "FootIK Ankle Roll Angle Limit",
            True,
            float,
            'FootIK Ankle roll limit angle (-1: no limit)',
        ),
        ParamFieldInfo(
            "chrHitGroupAndNavimesh",
            "Chr Hit Judgment",
            True,
            int,
            'Set the hit judgment with other characters (If you hit the ragdoll, other characters will hit the ragdoll)',
        ),
        ParamFieldInfo(
            "faceIconId",
            "Face Icon ID",
            True,
            int,
            'NPC face image ID (0: invalid value (default)). Specify the ID of the face image to be displayed in the "Sign browsing menu", "Kick menu", etc. If it is an invalid value, the dress-up model is displayed.',
        ),
        ParamFieldInfo(
            "deactivateDist",
            "Deactivation Distance",
            True,
            int,
            'Distance at which the character is deactivated (valid only for open placement characters)',
        ),
        ParamFieldInfo(
            "chrActivateConditionParamId",
            "Chr Activate Condition Param ID",
            True,
            int,
            'Character appearance condition parameter ID',
        ),
        ParamFieldInfo(
            "footIkErrorHeightLimit",
            "Foot IK Apperance Height Limit",
            True,
            float,
            'FootIK Appearance up / down limit',
        ),
        ParamFieldInfo(
            "humanityLotId",
            "Humanity Lot ID",
            True,
            int,
            'Specify the lottery ID of human nature to be acquired at the time of death',
        ),
        ParamFieldInfo(
            "spEffectID0",
            "SpEffect ID [0]",
            True,
            int,
            'Resident special effect 0',
        ),
        ParamFieldInfo(
            "spEffectID1",
            "SpEffect ID [1]",
            True,
            int,
            'Resident special effect 1',
        ),
        ParamFieldInfo(
            "spEffectID2",
            "SpEffect ID [2]",
            True,
            int,
            'Resident special effect 2',
        ),
        ParamFieldInfo(
            "spEffectID3",
            "SpEffect ID [3]",
            True,
            int,
            'Resident special effect 3',
        ),
        ParamFieldInfo(
            "spEffectID4",
            "SpEffect ID [4]",
            True,
            int,
            'Resident special effect 4',
        ),
        ParamFieldInfo(
            "spEffectID5",
            "SpEffect ID [5]",
            True,
            int,
            'Resident special effect 5',
        ),
        ParamFieldInfo(
            "spEffectID6",
            "SpEffect ID [6]",
            True,
            int,
            'Resident special effect 6',
        ),
        ParamFieldInfo(
            "spEffectID7",
            "SpEffect ID [7]",
            True,
            int,
            'Resident special effect 7',
        ),
        ParamFieldInfo(
            "GameClearSpEffectID",
            "Game Clear - SpEffect ID",
            True,
            int,
            'Special effect ID for lap bonus',
        ),
        ParamFieldInfo(
            "physGuardCutRate",
            "Guard Absorption %: Physical",
            True,
            float,
            'Set the damage cut rate when guarding for each attack',
        ),
        ParamFieldInfo(
            "magGuardCutRate",
            "Guard Absorption %: Magic",
            True,
            float,
            'If it is not a guard attack, enter 0',
        ),
        ParamFieldInfo(
            "fireGuardCutRate",
            "Guard Absorption %: Fire",
            True,
            float,
            'How much to cut the fire attack?',
        ),
        ParamFieldInfo(
            "thunGuardCutRate",
            "Guard Absorption %: Lightning",
            True,
            float,
            'How much to cut the electric shock attack?',
        ),
        ParamFieldInfo(
            "animIdOffset",
            "Anim ID Offset [1]",
            True,
            int,
            'All animations will be played with IDs shifted by this number. If not, the original anime ID is referenced.',
        ),
        ParamFieldInfo(
            "lockGazePoint0",
            "Lock Gaze Point - Dummy Poly ID [0]",
            True,
            int,
            'Gaze at the Damipoli specified when locking the Lock-on Damipoly 22X (-1: Invalid)',
        ),
        ParamFieldInfo(
            "lockGazePoint1",
            "Lock Gaze Point - Dummy Poly ID [1]",
            True,
            int,
            'Gaze at the Damipoli specified when locking the Lock-on Damipoly 22X (-1: Invalid)',
        ),
        ParamFieldInfo(
            "lockGazePoint2",
            "Lock Gaze Point - Dummy Poly ID [2]",
            True,
            int,
            'Gaze at the Damipoli specified when locking the Lock-on Damipoly 22X (-1: Invalid)',
        ),
        ParamFieldInfo(
            "lockGazePoint3",
            "Lock Gaze Point - Dummy Poly ID [3]",
            True,
            int,
            'Gaze at the Damipoli specified when locking the Lock-on Damipoly 22X (-1: Invalid)',
        ),
        ParamFieldInfo(
            "lockGazePoint4",
            "Lock Gaze Point - Dummy Poly ID [4]",
            True,
            int,
            'Gaze at the Damipoli specified when locking the Lock-on Damipoly 22X (-1: Invalid)',
        ),
        ParamFieldInfo(
            "lockGazePoint5",
            "Lock Gaze Point - Dummy Poly ID [5]",
            True,
            int,
            'Gaze at the Damipoli specified when locking the Lock-on Damipoly 22X (-1: Invalid)',
        ),
        ParamFieldInfo(
            "networkWarpDist",
            "Network Warp Display",
            True,
            float,
            'Distance to warp instead of complementary movement in network synchronization. Faster people (ex dragons) need to be longer.',
        ),
        ParamFieldInfo(
            "dbgBehaviorR1",
            "Debug Action - R1",
            True,
            int,
            'Register the ID from the action parameter tool and specify the action.',
        ),
        ParamFieldInfo(
            "dbgBehaviorL1",
            "Debug Action - L1",
            True,
            int,
            'Register the ID from the action parameter tool and specify the action.',
        ),
        ParamFieldInfo(
            "dbgBehaviorR2",
            "Debug Action - R2",
            True,
            int,
            'Register the ID from the action parameter tool and specify the action.',
        ),
        ParamFieldInfo(
            "dbgBehaviorL2",
            "Debug Action - L2",
            True,
            int,
            'Register the ID from the action parameter tool and specify the action.',
        ),
        ParamFieldInfo(
            "dbgBehaviorRL",
            "Debug Action - Square",
            True,
            int,
            'Register the ID from the action parameter tool and specify the action.',
        ),
        ParamFieldInfo(
            "dbgBehaviorRR",
            "Debug Action - Circle",
            True,
            int,
            'Register the ID from the action parameter tool and specify the action.',
        ),
        ParamFieldInfo(
            "dbgBehaviorRD",
            "Debug Action - Cross",
            True,
            int,
            'Register the ID from the action parameter tool and specify the action.',
        ),
        ParamFieldInfo(
            "dbgBehaviorRU",
            "Debug Action - Triangle",
            True,
            int,
            'Register the ID from the action parameter tool and specify the action.',
        ),
        ParamFieldInfo(
            "dbgBehaviorLL",
            "Debug Action - Left D-Pad",
            True,
            int,
            'Register the ID from the action parameter tool and specify the action.',
        ),
        ParamFieldInfo(
            "dbgBehaviorLR",
            "Debug Action - Right D-Pad",
            True,
            int,
            'Register the ID from the action parameter tool and specify the action.',
        ),
        ParamFieldInfo(
            "dbgBehaviorLD",
            "Debug Action - Down D-Pad",
            True,
            int,
            'Register the ID from the action parameter tool and specify the action.',
        ),
        ParamFieldInfo(
            "dbgBehaviorLU",
            "Debug Action - Up D-Pad",
            True,
            int,
            'Register the ID from the action parameter tool and specify the action.',
        ),
        ParamFieldInfo(
            "animIdOffset2",
            "Anim ID Offset [2]",
            True,
            int,
            'All animations will be played with IDs shifted by this number. If not, the animation ID of the animation ID offset 1 is referred to.',
        ),
        ParamFieldInfo(
            "partsDamageRate1",
            "Damage %: Part [1]",
            True,
            float,
            'Magnification that adapts to damage processing for part 1',
        ),
        ParamFieldInfo(
            "partsDamageRate2",
            "Damage %: Part [2]",
            True,
            float,
            'Magnification that adapts to damage processing for part 2',
        ),
        ParamFieldInfo(
            "partsDamageRate3",
            "Damage %: Part [3]",
            True,
            float,
            'Magnification that adapts to damage processing for part 3',
        ),
        ParamFieldInfo(
            "partsDamageRate4",
            "Damage %: Part [4]",
            True,
            float,
            'Magnification that adapts to damage processing for part 4',
        ),
        ParamFieldInfo(
            "partsDamageRate5",
            "Damage %: Part [5]",
            True,
            float,
            'Magnification that adapts to damage processing for part 5',
        ),
        ParamFieldInfo(
            "partsDamageRate6",
            "Damage %: Part [6]",
            True,
            float,
            'Magnification to adapt to damage processing for part 6',
        ),
        ParamFieldInfo(
            "partsDamageRate7",
            "Damage %: Part [7]",
            True,
            float,
            'Magnification that adapts to damage processing for part 7',
        ),
        ParamFieldInfo(
            "partsDamageRate8",
            "Damage %: Part [8]",
            True,
            float,
            'Magnification that adapts to damage processing for part 8',
        ),
        ParamFieldInfo(
            "weakPartsDamageRate",
            "Damage %: Weak Part",
            True,
            float,
            'Magnification that adapts to damage processing for weak points',
        ),
        ParamFieldInfo(
            "superArmorRecoverCorrection",
            "Poise Recovery Correction",
            True,
            float,
            'Correction value for super armor recovery time',
        ),
        ParamFieldInfo(
            "superArmorBrakeKnockbackDist",
            "Poise Knockback Distance",
            True,
            float,
            'Knockback distance that can be used only at the time of SA break',
        ),
        ParamFieldInfo(
            "stamina",
            "Stamina",
            True,
            int,
            'Total amount of stamina.',
        ),
        ParamFieldInfo(
            "staminaRecoverBaseVel",
            "Stamina Recovery",
            True,
            int,
            'Stamina recovery basic speed [point / s]',
        ),
        ParamFieldInfo(
            "def_phys",
            "Defence: Physical",
            True,
            int,
            'Damage reduction base value for physical attacks.',
        ),
        ParamFieldInfo(
            "def_slash",
            "Defence: Slash",
            True,
            int,
            'Look at the attack attribute, and if it is a slash attribute, reduce the defense power.',
        ),
        ParamFieldInfo(
            "def_blow",
            "Defence: Strike",
            True,
            int,
            'Look at the attack attribute, and if it is a hit attribute, reduce the defense power.',
        ),
        ParamFieldInfo(
            "def_thrust",
            "Defence: Thrust",
            True,
            int,
            'Look at the attack attribute, and if it is a piercing attribute, reduce the defense power.',
        ),
        ParamFieldInfo(
            "def_mag",
            "Defence: Magic",
            True,
            int,
            'Damage reduction base value for magic attacks.',
        ),
        ParamFieldInfo(
            "def_fire",
            "Defence: Fire",
            True,
            int,
            'Damage reduction base value against fire attack.',
        ),
        ParamFieldInfo(
            "def_thunder",
            "Defence: Lightning",
            True,
            int,
            'Damage reduction base value against electric shock attack.',
        ),
        ParamFieldInfo(
            "defFlickPower",
            "Weapon Repel Power",
            True,
            int,
            "Used to determine the repelling of enemy attacks. // It is intended to be repelled by normal attacks other than guards. // Enemies with a hard skin can be repelled without doing anything ... It doesn't matter if it is a normal enemy.",
        ),
        ParamFieldInfo(
            "resist_poison",
            "Resist: Poison",
            True,
            int,
            'Difficulty in getting poisonous',
        ),
        ParamFieldInfo(
            "resist_desease",
            "Resist: Scarlet Rot",
            True,
            int,
            'Difficulty in getting sick',
        ),
        ParamFieldInfo(
            "resist_blood",
            "Resist: Hemorrhage",
            True,
            int,
            'Difficulty in getting bleeding abnormalities',
        ),
        ParamFieldInfo(
            "resist_curse",
            "Resist: Blight",
            True,
            int,
            'Difficulty in dealing with abnormal curse conditions',
        ),
        ParamFieldInfo(
            "ghostModelId",
            "Ghost Model ID",
            True,
            int,
            'Replacement model when wandering ghost, texture ID',
        ),
        ParamFieldInfo(
            "normalChangeResouceId",
            "Override Resource Chr ID",
            True,
            int,
            'Replace resource ID during normal operation (do not use it unnecessarily)',
        ),
        ParamFieldInfo(
            "guardAngle",
            "Guard Angle",
            True,
            int,
            'Defense range angle when guarding weapons. Pending',
        ),
        ParamFieldInfo(
            "slashGuardCutRate",
            "Guard Absorption %: Slash",
            True,
            int,
            'Looking at the attack type, what percentage of the damage of the slashing attribute is cut? Specify',
        ),
        ParamFieldInfo(
            "blowGuardCutRate",
            "Guard Absorption %: Strike",
            True,
            int,
            'Looking at the attack type, what percentage of the damage of the hit attribute is cut? Specify',
        ),
        ParamFieldInfo(
            "thrustGuardCutRate",
            "Guard Absorption %: Thrust",
            True,
            int,
            'Looking at the attack type, what percentage of the damage of the piercing attribute is cut? Specify',
        ),
        ParamFieldInfo(
            "lockGazePoint6",
            "Lock Gaze Point - Dummy Poly [6]",
            True,
            int,
            'Gaze at the Damipoli specified when locking the Lock-on Damipoly 22X (-1: Invalid)',
        ),
        ParamFieldInfo(
            "normalChangeTexChrId",
            "Override Texture Chr ID",
            True,
            int,
            'Normal replacement texture character ID (do not use it unnecessarily)',
        ),
        ParamFieldInfo(
            "dropType",
            "Drop Type",
            True,
            int,
            'Display method when dropping an item (corpse emission or item display)',
        ),
        ParamFieldInfo(
            "knockbackRate",
            "Received Knockback %",
            True,
            int,
            'Decrease value when receiving knockback damage / Specifically, cut the initial knockback speed of the attacking side',
        ),
        ParamFieldInfo(
            "knockbackParamId",
            "Knockback Param ID",
            True,
            int,
            'Set the parameter ID used for knockback',
        ),
        ParamFieldInfo(
            "fallDamageDump",
            "Fall Damage Reduction %",
            True,
            int,
            'Fall damage reduction correction [%]',
        ),
        ParamFieldInfo(
            "staminaGuardDef",
            "Guard Stamina",
            True,
            int,
            'Defense against enemy stamina attacks when guarding successfully',
        ),
        ParamFieldInfo(
            "resist_sleep",
            "Resist: Sleep",
            True,
            int,
            'Difficulty in getting sleep abnormalities',
        ),
        ParamFieldInfo(
            "resist_madness",
            "Resist: Madness",
            True,
            int,
            'Difficulty in getting mad',
        ),
        ParamFieldInfo(
            "sleepGuardResist",
            "Guard Resist: Sleep",
            True,
            int,
            'How much to cut the attack power against sleep (set as a special effect parameter)',
        ),
        ParamFieldInfo(
            "madnessGuardResist",
            "Guard Resist: Madness",
            True,
            int,
            'How much to cut the attack power against madness (set as a special effect parameter)',
        ),
        ParamFieldInfo(
            "lockGazePoint7",
            "Lock Gaze Point - Dummy Poly [7]",
            True,
            int,
            'Gaze at the Damipoli specified when locking the Lock-on Damipoly 22X (-1: Invalid)',
        ),
        ParamFieldInfo(
            "mpRecoverBaseVel",
            "FP Recovery",
            True,
            int,
            'MP recovery basic speed [% / s]',
        ),
        ParamFieldInfo(
            "flickDamageCutRate",
            "Weapon Repel Absorption",
            True,
            int,
            'Set a value to attenuate damage when repelling an attack',
        ),
        ParamFieldInfo(
            "defaultLodParamId",
            "Default LOD Param ID",
            True,
            int,
            'Default LOD Param ID (-1: None)',
        ),
        ParamFieldInfo(
            "drawType",
            "Draw Type",
            True,
            int,
            'Drawing type',
        ),
        ParamFieldInfo(
            "npcType",
            "NPC Type",
            True,
            int,
            'NPC type. OK if Zako enemies / boss enemies are distinguished',
        ),
        ParamFieldInfo(
            "teamType",
            "Team Type",
            True,
            int,
            'NPC attack hit / not hit, aim / not aim setting',
        ),
        ParamFieldInfo(
            "moveType",
            "Move Type",
            True,
            int,
            'Moving method. This changes the control.',
        ),
        ParamFieldInfo(
            "lockDist",
            "Lock Distance",
            True,
            int,
            'Lock-on distance [m]',
        ),
        ParamFieldInfo(
            "materialSe_Weak1",
            "Weak Point - SE Material",
            True,
            int,
            'Determines the SE that sounds when the weak point is damaged. 1',
        ),
        ParamFieldInfo(
            "materialSfx_Weak1",
            "Weak Point - SFX Material",
            True,
            int,
            'Determines the SFX that occurs when the weak point is damaged. 1',
        ),
        ParamFieldInfo(
            "partsDamageType",
            "Parts Damage - Attack Type",
            True,
            int,
            'Set the attack type to apply site damage',
        ),
        ParamFieldInfo(
            "vowType",
            "Vow Type",
            True,
            int,
            'Pledge type',
        ),
        ParamFieldInfo(
            "guardLevel",
            "Guard Level",
            True,
            int,
            'When guarding, which guard motion will the enemy attack? Decide',
        ),
        ParamFieldInfo(
            "burnSfxType",
            "Burn SFX Type",
            True,
            int,
            'SFX type at the time of combustion',
        ),
        ParamFieldInfo(
            "poisonGuardResist",
            "Guard Resist: Poison",
            True,
            int,
            'How much to cut the attack power to poison (set to the special effect parameter)',
        ),
        ParamFieldInfo(
            "diseaseGuardResist",
            "Guard Resist: Scarlet Rot",
            True,
            int,
            'How much to cut the attack power (set as a special effect parameter) to make it a plague',
        ),
        ParamFieldInfo(
            "bloodGuardResist",
            "Guard Resist: Hemorrhage",
            True,
            int,
            'How much to cut the attack power (set as a special effect parameter) to make bleeding',
        ),
        ParamFieldInfo(
            "curseGuardResist",
            "Guard Resist: Blight",
            True,
            int,
            'How much to cut the attack power (set as a special effect parameter) to make a curse',
        ),
        ParamFieldInfo(
            "parryAttack",
            "Parry Attack Power",
            True,
            int,
            'Parry attack power. Used by the parrying side',
        ),
        ParamFieldInfo(
            "parryDefence",
            "Parry Defence Power",
            True,
            int,
            'Parry defense. Used by the parried side.',
        ),
        ParamFieldInfo(
            "sfxSize",
            "SFX Size",
            True,
            int,
            'SFX size',
        ),
        ParamFieldInfo(
            "pushOutCamRegionRadius",
            "Push Out Camera Region Radius",
            True,
            int,
            'Camera extrusion area radius [m]',
        ),
        ParamFieldInfo(
            "hitStopType",
            "Hit Stop Type",
            True,
            int,
            'Setting whether to perform hit stop processing',
        ),
        ParamFieldInfo(
            "ladderEndChkOffsetTop",
            "Ladder End Check Offset Top",
            True,
            int,
            'Upper side of the ladder end judgment offset',
        ),
        ParamFieldInfo(
            "ladderEndChkOffsetLow",
            "Ladder End Check Offset Bottom",
            True,
            int,
            'Lower side of ladder end judgment offset',
        ),
        ParamFieldInfo(
            "useRagdollCamHit:1",
            "Use Ragdoll Camera Hit",
            True,
            int,
            'Does the camera hit the enemy ragdoll? (Valid only when hitting the player)',
        ),
        ParamFieldInfo(
            "disableClothRigidHit:1",
            "Disable Cloth Rigid Hit",
            True,
            int,
            'If you want to prevent the cross rigid from hitting you ��',
        ),
        ParamFieldInfo(
            "useUndulationAddAnimFB:1",
            "Use Undulating Add Anim",
            True,
            int,
            'Whether to use front and back undulation addition',
        ),
        ParamFieldInfo(
            "isWeakA:1",
            "Enemy Type: Type A",
            True,
            int,
            'Special attack A? Special attack A damage multiplier will be included in the calculation',
        ),
        ParamFieldInfo(
            "isGhost:1",
            "Is Ghost",
            True,
            int,
            'The opponent\'s attack will be able to slip through. The attack hits only when the "anti-spirit weapon" of the weapon para is attacked with the weapon of ��. Be careful not to confuse it with a wandering ghost',
        ),
        ParamFieldInfo(
            "isNoDamageMotion:1",
            "Is No Damage Motion",
            True,
            int,
            'Do you not play the damage motion when the damage is 0?',
        ),
        ParamFieldInfo(
            "isUnduration:1",
            "Is Undulating",
            True,
            int,
            'Do you match the back and forth rotation of the character with the undulations of the ground? Cannot be used for flying characters',
        ),
        ParamFieldInfo(
            "isChangeWanderGhost:1",
            "Is Wandering Ghost",
            True,
            int,
            'Will it be a wandering ghost when the player is a client?',
        ),
        ParamFieldInfo(
            "modelDispMask0:1",
            "Model Display Mask [0]",
            True,
            int,
            'Displays the model corresponding to the display mask.',
        ),
        ParamFieldInfo(
            "modelDispMask1:1",
            "Model Display Mask [1]",
            True,
            int,
            'Displays the model corresponding to the display mask.',
        ),
        ParamFieldInfo(
            "modelDispMask2:1",
            "Model Display Mask [2]",
            True,
            int,
            'Displays the model corresponding to the display mask.',
        ),
        ParamFieldInfo(
            "modelDispMask3:1",
            "Model Display Mask [3]",
            True,
            int,
            'Displays the model corresponding to the display mask.',
        ),
        ParamFieldInfo(
            "modelDispMask4:1",
            "Model Display Mask [4]",
            True,
            int,
            'Displays the model corresponding to the display mask.',
        ),
        ParamFieldInfo(
            "modelDispMask5:1",
            "Model Display Mask [5]",
            True,
            int,
            'Displays the model corresponding to the display mask.',
        ),
        ParamFieldInfo(
            "modelDispMask6:1",
            "Model Display Mask [6]",
            True,
            int,
            'Displays the model corresponding to the display mask.',
        ),
        ParamFieldInfo(
            "modelDispMask7:1",
            "Model Display Mask [7]",
            True,
            int,
            'Displays the model corresponding to the display mask.',
        ),
        ParamFieldInfo(
            "modelDispMask8:1",
            "Model Display Mask [8]",
            True,
            int,
            'Displays the model corresponding to the display mask.',
        ),
        ParamFieldInfo(
            "modelDispMask9:1",
            "Model Display Mask [9]",
            True,
            int,
            'Displays the model corresponding to the display mask.',
        ),
        ParamFieldInfo(
            "modelDispMask10:1",
            "Model Display Mask [10]",
            True,
            int,
            'Displays the model corresponding to the display mask.',
        ),
        ParamFieldInfo(
            "modelDispMask11:1",
            "Model Display Mask [11]",
            True,
            int,
            'Displays the model corresponding to the display mask.',
        ),
        ParamFieldInfo(
            "modelDispMask12:1",
            "Model Display Mask [12]",
            True,
            int,
            'Displays the model corresponding to the display mask.',
        ),
        ParamFieldInfo(
            "modelDispMask13:1",
            "Model Display Mask [13]",
            True,
            int,
            'Displays the model corresponding to the display mask.',
        ),
        ParamFieldInfo(
            "modelDispMask14:1",
            "Model Display Mask [14]",
            True,
            int,
            'Displays the model corresponding to the display mask.',
        ),
        ParamFieldInfo(
            "modelDispMask15:1",
            "Model Display Mask [15]",
            True,
            int,
            'Displays the model corresponding to the display mask.',
        ),
        ParamFieldInfo(
            "isEnableNeckTurn:1",
            "Is Enable Neck Turn",
            True,
            int,
            'Do you want to enable the swing set in Param Weaver?',
        ),
        ParamFieldInfo(
            "disableRespawn:1",
            "Disable Respawn upon Rest",
            True,
            int,
            'Do you ban respawn?',
        ),
        ParamFieldInfo(
            "isMoveAnimWait:1",
            "Play Movement Anim until Over",
            True,
            int,
            'Do you want to play the moving animation until the animation is over? (Like a mayfly dragon.)',
        ),
        ParamFieldInfo(
            "isCrowd:1",
            "Reduce Processing Load during Crowds",
            True,
            int,
            'Do you want to reduce the processing load during crowds? For babies (preferably phalanx)',
        ),
        ParamFieldInfo(
            "isWeakB:1",
            "Enemy Type: Type B",
            True,
            int,
            'Special attack B? Special attack B damage multiplier will be included in the calculation',
        ),
        ParamFieldInfo(
            "isWeakC:1",
            "Enemy Type: Type C",
            True,
            int,
            'Special attack C? Special attack C damage multiplier will be included in the calculation',
        ),
        ParamFieldInfo(
            "isWeakD:1",
            "Enemy Type: Type D",
            True,
            int,
            'Special attack D? Special attack D damage multiplier will be included in the calculation',
        ),
        ParamFieldInfo(
            "doesAlwaysUseSpecialTurn:1",
            "Always Use Special Turn",
            True,
            int,
            'Always execute a special turn (even if there is no navigation mesh at the turn destination, the special turn is continuously executed)',
        ),
        ParamFieldInfo(
            "isRideAtkTarget:1",
            "Is Ride Attack Target",
            True,
            int,
            'Will you be the target of a riding special attack (if you are riding)?',
        ),
        ParamFieldInfo(
            "isEnableStepDispInterpolate:1",
            "Enable Step Display Interpolation",
            True,
            int,
            'Whether to use step-over display interpolation',
        ),
        ParamFieldInfo(
            "isStealthTarget:1",
            "Is Stealth Attack Target",
            True,
            int,
            'Is it a stealth attack target?',
        ),
        ParamFieldInfo(
            "disableInitializeDead:1",
            "Disable Init Dead",
            True,
            int,
            'If you do not make an initial death, TRUE, even if you kill and save it, the corpse will not be reproduced.',
        ),
        ParamFieldInfo(
            "isHitRumble:1",
            "Is Hit Rumble",
            True,
            int,
            'TRUE if it vibrates when hit. Use when you want to change from a normal hit stop, such as a dead person.',
        ),
        ParamFieldInfo(
            "isSmoothTurn:1",
            "Use Smooth Turning",
            True,
            int,
            'Whether to perform interpolation when turning between nodes in route movement',
        ),
        ParamFieldInfo(
            "isWeakE:1",
            "Enemy Type: Type E",
            True,
            int,
            'Special attack E? Special attack E damage multiplier will be included in the calculation',
        ),
        ParamFieldInfo(
            "isWeakF:1",
            "Enemy Type: Type F",
            True,
            int,
            'Special attack F? Special attack F damage multiplier will be included in the calculation',
        ),
        ParamFieldInfo(
            "modelDispMask16:1",
            "Model Display Mask [16]",
            True,
            int,
            'Displays the model corresponding to the display mask.',
        ),
        ParamFieldInfo(
            "modelDispMask17:1",
            "Model Display Mask [17]",
            True,
            int,
            'Displays the model corresponding to the display mask.',
        ),
        ParamFieldInfo(
            "modelDispMask18:1",
            "Model Display Mask [18]",
            True,
            int,
            'Displays the model corresponding to the display mask.',
        ),
        ParamFieldInfo(
            "modelDispMask19:1",
            "Model Display Mask [19]",
            True,
            int,
            'Displays the model corresponding to the display mask.',
        ),
        ParamFieldInfo(
            "modelDispMask20:1",
            "Model Display Mask [20]",
            True,
            int,
            'Displays the model corresponding to the display mask.',
        ),
        ParamFieldInfo(
            "modelDispMask21:1",
            "Model Display Mask [21]",
            True,
            int,
            'Displays the model corresponding to the display mask.',
        ),
        ParamFieldInfo(
            "modelDispMask22:1",
            "Model Display Mask [22]",
            True,
            int,
            'Displays the model corresponding to the display mask.',
        ),
        ParamFieldInfo(
            "modelDispMask23:1",
            "Model Display Mask [23]",
            True,
            int,
            'Displays the model corresponding to the display mask.',
        ),
        ParamFieldInfo(
            "modelDispMask24:1",
            "Model Display Mask [24]",
            True,
            int,
            'Displays the model corresponding to the display mask.',
        ),
        ParamFieldInfo(
            "modelDispMask25:1",
            "Model Display Mask [25]",
            True,
            int,
            'Displays the model corresponding to the display mask.',
        ),
        ParamFieldInfo(
            "modelDispMask26:1",
            "Model Display Mask [26]",
            True,
            int,
            'Displays the model corresponding to the display mask.',
        ),
        ParamFieldInfo(
            "modelDispMask27:1",
            "Model Display Mask [27]",
            True,
            int,
            'Displays the model corresponding to the display mask.',
        ),
        ParamFieldInfo(
            "modelDispMask28:1",
            "Model Display Mask [28]",
            True,
            int,
            'Displays the model corresponding to the display mask.',
        ),
        ParamFieldInfo(
            "modelDispMask29:1",
            "Model Display Mask [29]",
            True,
            int,
            'Displays the model corresponding to the display mask.',
        ),
        ParamFieldInfo(
            "modelDispMask30:1",
            "Model Display Mask [30]",
            True,
            int,
            'Displays the model corresponding to the display mask.',
        ),
        ParamFieldInfo(
            "modelDispMask31:1",
            "Model Display Mask [31]",
            True,
            int,
            'Displays the model corresponding to the display mask.',
        ),
        ParamFieldInfo(
            "itemSearchRadius",
            "Item Pickup Radius",
            True,
            float,
            'Radius to be added as a correction to the cylinder radius of normal Item search judgment (applicable to enemy drop items. Used for large characters etc.)',
        ),
        ParamFieldInfo(
            "chrHitHeight",
            "Chr Capsule Height",
            True,
            float,
            'The height of the capsule per character.',
        ),
        ParamFieldInfo(
            "chrHitRadius",
            "Chr Capsule Radius",
            True,
            float,
            'Radius of capsule per character.',
        ),
        ParamFieldInfo(
            "specialTurnType",
            "Special Turn Type",
            True,
            int,
            'Special turning type',
        ),
        ParamFieldInfo(
            "isSoulGetByBoss:1",
            "Is Boss Soul Drop",
            True,
            int,
            'Do you get a boss in soul?',
        ),
        ParamFieldInfo(
            "isBulletOwner_byObject:1",
            "Is Bullet Owner - By Object",
            True,
            int,
            "If you become the owner of a bullet, a flag that applies the object's damage calculation related to the bullet. Used for damage correction by power.",
        ),
        ParamFieldInfo(
            "isUseLowHitFootIk:1",
            "Use FootIK Filter for Low Hit",
            True,
            int,
            'Whether to use the FootIk filter for low hits',
        ),
        ParamFieldInfo(
            "isCalculatePvPDamage:1",
            "Use PvP Damage Modifiers",
            True,
            int,
            'Decide whether to calculate damage as a "player" when calculating damage. If it is invalid, it is treated as an "enemy".',
        ),
        ParamFieldInfo(
            "isHostSyncChr:1",
            "Is Synced with Host World",
            True,
            int,
            'Can only be activated when active in the host world',
        ),
        ParamFieldInfo(
            "isSkipWeakDamageAnim:1",
            "Skip Weak Damage Anim",
            True,
            int,
            'Weakness damage Whether to skip animation playback. "Part damage rate" and "defense material" are treated as weak points just by not playing the animation.',
        ),
        ParamFieldInfo(
            "isKeepHitOnRide:1",
            "Keep Capsule on Ride",
            True,
            int,
            "When riding on a character with this parameter ��, the character's Atari remains while riding.",
        ),
        ParamFieldInfo(
            "isSpCollide:1",
            "Is Special Collider",
            True,
            int,
            'Is it a special character?',
        ),
        ParamFieldInfo(
            "def_dark",
            "Defence: Holy",
            True,
            int,
            'Damage reduction base value for dark attacks.',
        ),
        ParamFieldInfo(
            "threatLv",
            "Threat Level",
            True,
            int,
            'Threat level. If it is 0, even if the PC is found, "FE that seems to be found" is not displayed.',
        ),
        ParamFieldInfo(
            "specialTurnDistanceThreshold",
            "Special Turn Distance Threshold",
            True,
            float,
            'Make a special turn when the distance to the target is greater than or equal to the set threshold',
        ),
        ParamFieldInfo(
            "autoFootEffectSfxId",
            "Automatic Foot Effect - SFX ID",
            True,
            int,
            'The SFX identifier used in the automatic foot effect. (ZZZ of XYYZZZ)',
        ),
        ParamFieldInfo(
            "materialSe1",
            "Damaged - Material SE [1]",
            True,
            int,
            'Determine the SE that sounds when damaged. 1. It is OK to set it by appearance.',
        ),
        ParamFieldInfo(
            "materialSfx1",
            "Damaged - Material SFX [1]",
            True,
            int,
            'Determine the SFX that occurs when you take damage. 1. It is OK to set it by appearance.',
        ),
        ParamFieldInfo(
            "materialSe_Weak2",
            "Weak Point - Material SE [2]",
            True,
            int,
            'Determines the SE that sounds when the weak point is damaged. 2',
        ),
        ParamFieldInfo(
            "materialSfx_Weak2",
            "Weak Point - Material SFX [2]",
            True,
            int,
            'Determines the SFX that occurs when the weak point is damaged. 2',
        ),
        ParamFieldInfo(
            "materialSe2",
            "Damaged - Material SE [2]",
            True,
            int,
            'Determine the SE that sounds when damaged. 2. It is OK to set it by appearance.',
        ),
        ParamFieldInfo(
            "materialSfx2",
            "Damaged - Material SFX [2]",
            True,
            int,
            'Determine the SFX that occurs when you take damage. 2. It is OK to set it by appearance.',
        ),
        ParamFieldInfo(
            "spEffectID8",
            "SpEffect ID [8]",
            True,
            int,
            'Resident special effect 8',
        ),
        ParamFieldInfo(
            "spEffectID9",
            "SpEffect ID [9]",
            True,
            int,
            'Resident special effect 9',
        ),
        ParamFieldInfo(
            "spEffectID10",
            "SpEffect ID [10]",
            True,
            int,
            'Resident special effect 10',
        ),
        ParamFieldInfo(
            "spEffectID11",
            "SpEffect ID [11]",
            True,
            int,
            'Resident special effects 11',
        ),
        ParamFieldInfo(
            "spEffectID12",
            "SpEffect ID [12]",
            True,
            int,
            'Resident special effect 12',
        ),
        ParamFieldInfo(
            "spEffectID13",
            "SpEffect ID [13]",
            True,
            int,
            'Resident special effect 13',
        ),
        ParamFieldInfo(
            "spEffectID14",
            "SpEffect ID [14]",
            True,
            int,
            'Resident special effect 14',
        ),
        ParamFieldInfo(
            "spEffectID15",
            "SpEffect ID [15]",
            True,
            int,
            'Resident special effects 15',
        ),
        ParamFieldInfo(
            "autoFootEffectDecalBaseId1",
            "Automatic Foot Effect - Decal Base ID [1]",
            True,
            int,
            'Decal to be attached when a foot effect occurs. Floor material is also taken into consideration',
        ),
        ParamFieldInfo(
            "toughness",
            "Toughness",
            True,
            int,
            'Basic value of toughness',
        ),
        ParamFieldInfo(
            "toughnessRecoverCorrection",
            "Toughness Correction",
            True,
            float,
            'Correction value for toughness recovery time',
        ),
        ParamFieldInfo(
            "neutralDamageCutRate",
            "Absorption %: Standard",
            True,
            float,
            'Non-attribute damage multiplier. The final damage value is the value obtained by multiplying the damage calculation result by this value.',
        ),
        ParamFieldInfo(
            "slashDamageCutRate",
            "Absorption %: Slash",
            True,
            float,
            'Slash damage multiplier. The final damage value is the value obtained by multiplying the damage calculation result by this value.',
        ),
        ParamFieldInfo(
            "blowDamageCutRate",
            "Absorption %: Strike",
            True,
            float,
            'Batter damage multiplier. The final damage value is the value obtained by multiplying the damage calculation result by this value.',
        ),
        ParamFieldInfo(
            "thrustDamageCutRate",
            "Absorption %: Thrust",
            True,
            float,
            'Puncture damage ratio. The final damage value is the value obtained by multiplying the damage calculation result by this value.',
        ),
        ParamFieldInfo(
            "magicDamageCutRate",
            "Absorption %: Magic",
            True,
            float,
            'Magic damage multiplier. The final damage value is the value obtained by multiplying the damage calculation result by this value.',
        ),
        ParamFieldInfo(
            "fireDamageCutRate",
            "Absorption %: Fire",
            True,
            float,
            'Flame damage multiplier. The final damage value is the value obtained by multiplying the damage calculation result by this value.',
        ),
        ParamFieldInfo(
            "thunderDamageCutRate",
            "Absorption %: Lightning",
            True,
            float,
            'Electric shock damage ratio. The final damage value is the value obtained by multiplying the damage calculation result by this value.',
        ),
        ParamFieldInfo(
            "darkDamageCutRate",
            "Absorption %: Holy",
            True,
            float,
            'Dark damage multiplier. The final damage value is the value obtained by multiplying the damage calculation result by this value.',
        ),
        ParamFieldInfo(
            "darkGuardCutRate",
            "Guard Absorption %: Holy",
            True,
            float,
            'How much to cut the dark attack?',
        ),
        ParamFieldInfo(
            "clothUpdateOffset",
            "Cloth Update Offset",
            True,
            int,
            'Cross update priority offset [m]',
        ),
        ParamFieldInfo(
            "npcPlayerWeightType",
            "NPC Player Weight Type",
            True,
            int,
            'Equipment weight type applied for NPC players',
        ),
        ParamFieldInfo(
            "normalChangeModelId",
            "Replacement Change - Model ID",
            True,
            int,
            'Normal replacement model, texture ID',
        ),
        ParamFieldInfo(
            "normalChangeAnimChrId",
            "Replacement Change - Anim Chr ID",
            True,
            int,
            'Replace the target animation with the specified ID Anibnd',
        ),
        ParamFieldInfo(
            "paintRenderTargetSize",
            "Paint Render Target Size",
            True,
            int,
            'Paint render target size [pix]',
        ),
        ParamFieldInfo(
            "resistCorrectId_disease",
            "Resist Correct: Scarlet Rot",
            True,
            int,
            'When the abnormal condition is activated, the maximum value is temporarily changed by using the set value of the abnormal condition resistance correction parameter.',
        ),
        ParamFieldInfo(
            "phantomShaderId",
            "Phantom Shader ID",
            True,
            int,
            'ID of the phantom parameter .xlsm to apply',
        ),
        ParamFieldInfo(
            "multiPlayCorrectionParamId",
            "Multiplayer Correction Param ID",
            True,
            int,
            'Multiplayer correction parameter ID',
        ),
        ParamFieldInfo(
            "maxAnklePitchAngle",
            "FootIK Ankle Pitch Limit Angle",
            True,
            float,
            'FootIK Ankle pitch limit angle (-1: no limit). If you have not set Foot End L S in HAT, this angle is used in common with rolls.',
        ),
        ParamFieldInfo(
            "resist_freeze",
            "Resist: Frostbite",
            True,
            int,
            'Difficulty in getting cold air condition abnormal',
        ),
        ParamFieldInfo(
            "freezeGuardResist",
            "Guard Resist: Frostbite",
            True,
            int,
            'How much to cut the attack power against cold air (set as a special effect parameter)',
        ),
        ParamFieldInfo(
            "pad1[1]",
            "pad",
            False,
            pad_field(1),
            '',
        ),
        ParamFieldInfo(
            "lockCameraParamId",
            "Lock Camera Param ID",
            True,
            int,
            'The ID of the lock camera parameter applied to the camera when locked on. Highest priority. Unused if -1',
        ),
        ParamFieldInfo(
            "spEffectID16",
            "SpEffect ID [16]",
            True,
            int,
            'Resident special effects 16',
        ),
        ParamFieldInfo(
            "spEffectID17",
            "SpEffect ID [17]",
            True,
            int,
            'Resident special effects 17',
        ),
        ParamFieldInfo(
            "spEffectID18",
            "SpEffect ID [18]",
            True,
            int,
            'Resident special effects 18',
        ),
        ParamFieldInfo(
            "spEffectID19",
            "SpEffect ID [19]",
            True,
            int,
            'Resident special effects 19',
        ),
        ParamFieldInfo(
            "spEffectID20",
            "SpEffect ID [20]",
            True,
            int,
            'Resident special effect 20',
        ),
        ParamFieldInfo(
            "spEffectID21",
            "SpEffect ID [21]",
            True,
            int,
            'Resident special effect 21',
        ),
        ParamFieldInfo(
            "spEffectID22",
            "SpEffect ID [22]",
            True,
            int,
            'Resident special effect 22',
        ),
        ParamFieldInfo(
            "spEffectID23",
            "SpEffect ID [23]",
            True,
            int,
            'Resident special effect 23',
        ),
        ParamFieldInfo(
            "spEffectID24",
            "SpEffect ID [24]",
            True,
            int,
            'Resident special effect 24',
        ),
        ParamFieldInfo(
            "spEffectID25",
            "SpEffect ID [25]",
            True,
            int,
            'Resident special effects 25',
        ),
        ParamFieldInfo(
            "spEffectID26",
            "SpEffect ID [26]",
            True,
            int,
            'Resident special effect 26',
        ),
        ParamFieldInfo(
            "spEffectID27",
            "SpEffect ID [27]",
            True,
            int,
            'Resident special effect 27',
        ),
        ParamFieldInfo(
            "spEffectID28",
            "SpEffect ID [28]",
            True,
            int,
            'Resident special effects 28',
        ),
        ParamFieldInfo(
            "spEffectID29",
            "SpEffect ID [29]",
            True,
            int,
            'Resident special effect 29',
        ),
        ParamFieldInfo(
            "spEffectID30",
            "SpEffect ID [30]",
            True,
            int,
            'Resident special effect 30',
        ),
        ParamFieldInfo(
            "spEffectID31",
            "SpEffect ID [31]",
            True,
            int,
            'Resident special effects 31',
        ),
        ParamFieldInfo(
            "disableLockOnAng",
            "Disable Lock-on Angle",
            True,
            float,
            'Create a conical lock-on non-lockable area beneath the enemy. The angle of the size of the cone. Can be changed temporarily from TAE',
        ),
        ParamFieldInfo(
            "clothOffLodLevel",
            "LOD Level to Disable Cloth Processing",
            True,
            int,
            'Set the LOD level to turn off cross processing',
        ),
        ParamFieldInfo(
            "isUseFootIKNormalByUnduration:1",
            "Use Foot IK for Undulating Character",
            True,
            int,
            'Do you use the FootIK result to match your character to the undulations of the ground? Cannot be used for flying characters',
        ),
        ParamFieldInfo(
            "attachHitInitializeDead:1",
            "Attach to Ground upon Death",
            True,
            int,
            'Whether to ground the capsule at the time of initial death',
        ),
        ParamFieldInfo(
            "excludeGroupRewardCheck:1",
            "Exclude Group Reward Check",
            True,
            int,
            'Group reward: In the judgment of "all dead", characters with this parameter �� are excluded from the judgment.',
        ),
        ParamFieldInfo(
            "enableAILockDmyPoly_212:1",
            "Enable AI Lock Dummy Poly [212]",
            True,
            int,
            'Is Rock Damipoli (for Enemy) 212 Effective?',
        ),
        ParamFieldInfo(
            "enableAILockDmyPoly_213:1",
            "Enable AI Lock Dummy Poly [213]",
            True,
            int,
            'Is Rock Damipoli (for Enemy) 213 Effective?',
        ),
        ParamFieldInfo(
            "enableAILockDmyPoly_214:1",
            "Enable AI Lock Dummy Poly [214]",
            True,
            int,
            'Is Rock Damipoli (for Enemy) 214 Effective?',
        ),
        ParamFieldInfo(
            "disableActivateOpen_xb1:1",
            "Disable Open Activation - XB1",
            True,
            int,
            'Excluded from open_XB1',
        ),
        ParamFieldInfo(
            "disableActivateLegacy_xb1:1",
            "Disable Legacy Activation - XB1",
            True,
            int,
            'Excluded from Legacy_XB1',
        ),
        ParamFieldInfo(
            "estusFlaskRecoveryParamId",
            "Flask Recovery Param ID",
            True,
            int,
            'When the character dies, the data ID of the est usage count recovery parameter .xlsm, which is the same as the value, is acquired and the est bottle is recovered. Unused if -1',
        ),
        ParamFieldInfo(
            "roleNameId",
            "Role Name ID",
            True,
            int,
            'Specify the role name at the time of summoning. -1: Use the default role name of the target spirit body. 0: No display. 1 or more: Used as a text ID.',
        ),
        ParamFieldInfo(
            "estusFlaskLotPoint",
            "HP/FP Flask Recovery Chance",
            True,
            int,
            'HP / MP est recovery probability when defeating an enemy. The numerator is obtained from the NPC para with 10000 as the denominator.',
        ),
        ParamFieldInfo(
            "hpEstusFlaskLotPoint",
            "HP Flask Recovery Chance",
            True,
            int,
            'Recovery probability of MP Est when defeating an enemy. The numerator is obtained from the NPC para with 10000 as the denominator.',
        ),
        ParamFieldInfo(
            "mpEstusFlaskLotPoint",
            "FP Flask Recovery Chance",
            True,
            int,
            'Recovery probability of MP Est when defeating an enemy. The numerator is obtained from the NPC para with 10000 as the denominator.',
        ),
        ParamFieldInfo(
            "estusFlaskRecovery_failedLotPointAdd",
            "Missed HP/FP Flask Recovery - Bonus Chance",
            True,
            int,
            'Next time probability increase value when you miss the HP / MP est recovery lottery. Addition value of numerator.',
        ),
        ParamFieldInfo(
            "hpEstusFlaskRecovery_failedLotPointAdd",
            "Missed HP Flask Recovery - Bonus Chance",
            True,
            int,
            'The next probability increase value when you miss the HP Est Recovery Lottery. Addition value of numerator.',
        ),
        ParamFieldInfo(
            "mpEstusFlaskRecovery_failedLotPointAdd",
            "Missed FP Flask Recovery - Bonus Chance",
            True,
            int,
            'The next probability increase value when the MP est recovery lottery is missed. Addition value of numerator.',
        ),
        ParamFieldInfo(
            "WanderGhostPhantomId",
            "Wandering Ghost Phantom ID",
            True,
            int,
            'Phantom shader with ID specified only on the guest side Specify the phantom shader ID and make it an illusion',
        ),
        ParamFieldInfo(
            "hearingHeadSize",
            "Listen Head Size",
            True,
            float,
            'The offset size to be set instead of the capsule offset at the time of hearing judgment. Use this value as an offset only if it is set to 0 or higher.',
        ),
        ParamFieldInfo(
            "SoundBankId",
            "Sound Bank ID",
            True,
            int,
            'Sound bank ID can be specified -1: Use the bank of character ID (resource name)',
        ),
        ParamFieldInfo(
            "forwardUndulationLimit",
            "Forward Undulation Limit",
            True,
            int,
            'The upper limit angle when adjusting the front-back angle to the undulation. If the total length is long, it is better to set it lower.',
        ),
        ParamFieldInfo(
            "sideUndulationLimit",
            "Side Undulation Limit",
            True,
            int,
            'Upper limit angle when adjusting the left and right angles to the undulations. If the total length is long, it is better to set it lower.',
        ),
        ParamFieldInfo(
            "deactiveMoveSpeed",
            "Platoon - Deactivation Movement Speed",
            True,
            float,
            'Platoon Deactive Movement Speed [m / s]',
        ),
        ParamFieldInfo(
            "deactiveMoveDist",
            "Platoon - Deactivation Distance",
            True,
            float,
            'Distance to switch to platoon deactive movement [m]',
        ),
        ParamFieldInfo(
            "enableSoundObjDist",
            "Sound Source Validity - Player Distance",
            True,
            float,
            'The distance from the player for which the character sound source is valid. -1: Effective at all distances',
        ),
        ParamFieldInfo(
            "undulationCorrectGain",
            "Undulation Angle Correction",
            True,
            float,
            'Set the speed when adjusting the angle to the undulations',
        ),
        ParamFieldInfo(
            "autoFootEffectDecalBaseId2",
            "Automatic Foot Effect - Decal Base ID [2]",
            True,
            int,
            'Decal to be attached when a foot effect occurs. Floor material is also taken into consideration',
        ),
        ParamFieldInfo(
            "autoFootEffectDecalBaseId3",
            "Automatic Foot Effect - Decal Base ID [3]",
            True,
            int,
            'Decal to be attached when a foot effect occurs. Floor material is also taken into consideration',
        ),
        ParamFieldInfo(
            "RetargetReferenceChrId",
            "Motion Re-target Reference Chr ID",
            True,
            int,
            'Character ID to be referred to when specifying the motion retarget destination',
        ),
        ParamFieldInfo(
            "SfxResBankId",
            "SFX Resource Bank ID",
            True,
            int,
            'SFX resource bank ID can be specified -1: Use the bank of character ID (resource name)',
        ),
        ParamFieldInfo(
            "updateActivatePriolity",
            "Activation Update Priority",
            True,
            float,
            'Used to determine the activation / renewal level. The larger it is, the lower the update level will be even if you are far from the player.',
        ),
        ParamFieldInfo(
            "chrNavimeshFlag_Alive",
            "Chr Navmesh Flag - Alive",
            True,
            int,
            'Flag the value of the touching Nav Mesh while the character is alive. Does not follow the movement.',
        ),
        ParamFieldInfo(
            "chrNavimeshFlag_Dead",
            "Chr Navmesh Flag - Dead",
            True,
            int,
            'Flag the value on the touching Nav Mesh while the character is dying. Does not follow the movement.',
        ),
        ParamFieldInfo(
            "pad7[1]",
            "pad",
            False,
            pad_field(1),
            '',
        ),
        ParamFieldInfo(
            "wheelRotType",
            "Wheel Rotation Type",
            True,
            int,
            'Wheel control type',
        ),
        ParamFieldInfo(
            "wheelRotRadius",
            "Wheel Rotation Radius",
            True,
            float,
            'Specify the radius of the wheel [m]',
        ),
        ParamFieldInfo(
            "retargetMoveRate",
            "Retarget Movement Rate",
            True,
            float,
            'Magnification of movement amount at the time of retargeting',
        ),
        ParamFieldInfo(
            "ladderWarpOffset",
            "Ladder - Warp Z Offset",
            True,
            float,
            'Offsets along the Damipoly Z-axis at the specified value. Both positive and negative numbers can be specified.',
        ),
        ParamFieldInfo(
            "loadAssetId",
            "Load Asset ID",
            True,
            int,
            'Asset ID to be read in connection with character loading (for dynamic generation of characters, etc.).',
        ),
        ParamFieldInfo(
            "overlapCameraDmypolyId",
            "Overlap Camera - Dummy Poly ID",
            True,
            int,
            'Set the Damipoly ID (220-227) to enable the overlap camera. If it is -1, it will be invalid.',
        ),
        ParamFieldInfo(
            "residentMaterialExParamId00",
            "Material Ex Param ID [0]",
            True,
            int,
            'Resident Material Expansion Para ID0',
        ),
        ParamFieldInfo(
            "residentMaterialExParamId01",
            "Material Ex Param ID [1]",
            True,
            int,
            'Resident Material Expansion Para ID1',
        ),
        ParamFieldInfo(
            "residentMaterialExParamId02",
            "Material Ex Param ID [2]",
            True,
            int,
            'Resident Material Expansion Para ID2',
        ),
        ParamFieldInfo(
            "residentMaterialExParamId03",
            "Material Ex Param ID [3]",
            True,
            int,
            'Resident Material Expansion Para ID3',
        ),
        ParamFieldInfo(
            "residentMaterialExParamId04",
            "Material Ex Param ID [4]",
            True,
            int,
            'Resident Material Expansion Para ID4',
        ),
        ParamFieldInfo(
            "sleepCollectorItemLotId_enemy",
            "Sleep Collector - Enemy Item Lot",
            True,
            int,
            'Specify the lottery ID_for enemies of the item to be acquired when collecting Nemuri. Please set only one of them.',
        ),
        ParamFieldInfo(
            "sleepCollectorItemLotId_map",
            "Sleep Collector - Map Item Lot",
            True,
            int,
            'Specify for the lottery ID_map of the item to be acquired when collecting Nemuri. Please set only one of them.',
        ),
        ParamFieldInfo(
            "footIkErrorOnGain",
            "Foot IK - Error On Gain",
            True,
            float,
            'FootIK Appearance height correction ON gain value',
        ),
        ParamFieldInfo(
            "footIkErrorOffGain",
            "Foot IK - Error Off Gain",
            True,
            float,
            'FootIK Appearance height correction OFF gain value',
        ),
        ParamFieldInfo(
            "SoundAddBankId",
            "Sound Add Bank ID",
            True,
            int,
            'You can specify an additional sound bank ID -1 or 0: No addition (SEQ 16135)',
        ),
        ParamFieldInfo(
            "materialVariationValue",
            "Material Variation Value",
            True,
            int,
            'It is a value used in combination with the defense material to classify abnormal conditions, damage SFX, and SE. SEQ16473',
        ),
        ParamFieldInfo(
            "materialVariationValue_Weak",
            "Weak Point - Material Variation Value",
            True,
            int,
            'It is a value used for variation of abnormal condition, damage SFX, SE in combination with weak point defense material. SEQ16473',
        ),
        ParamFieldInfo(
            "superArmorDurability",
            "Poise",
            True,
            float,
            'Super armor durability value',
        ),
        ParamFieldInfo(
            "saRecoveryRate",
            "Poise Recovery",
            True,
            float,
            'Correct the SA recovery speed by multiplying the SA basic recovery amount',
        ),
        ParamFieldInfo(
            "saGuardCutRate",
            "Guard Absorption %: Poise Damage",
            True,
            float,
            'Cut rate of SA damage when guard is successful',
        ),
        ParamFieldInfo(
            "resistCorrectId_blood",
            "Resist Correct ID: Hemorrhage",
            True,
            int,
            'When the abnormal condition is activated, the maximum value is temporarily changed by using the setting value of the abnormal condition resistance correction parameter.',
        ),
        ParamFieldInfo(
            "resistCorrectId_curse",
            "Resist Correct ID: Blight",
            True,
            int,
            'When the abnormal condition is activated, the maximum value is temporarily changed by using the set value of the abnormal condition resistance correction parameter.',
        ),
        ParamFieldInfo(
            "resistCorrectId_freeze",
            "Resist Correct ID: Frostbite",
            True,
            int,
            'When the abnormal condition is activated, the maximum value is temporarily changed by using the setting value of the abnormal condition resistance correction parameter.',
        ),
        ParamFieldInfo(
            "resistCorrectId_sleep",
            "Resist Correct ID: Sleep",
            True,
            int,
            'When the abnormal condition is activated, the maximum value is temporarily changed by using the set value of the abnormal condition resistance correction parameter.',
        ),
        ParamFieldInfo(
            "resistCorrectId_madness",
            "Resist Correct ID: Madness",
            True,
            int,
            'When the abnormal condition is activated, the maximum value is temporarily changed by using the set value of the abnormal condition resistance correction parameter.',
        ),
        ParamFieldInfo(
            "chrDeadTutorialFlagId",
            "Chr Dead Tutorial Flag ID",
            True,
            int,
            'Event flag ID for the tutorial when the character is defeated for the first time. Flag ON when the character dies.',
        ),
        ParamFieldInfo(
            "stepDispInterpolateTime",
            "Step Display Interpolation Time",
            True,
            float,
            'Step crossing display interpolation time',
        ),
        ParamFieldInfo(
            "stepDispInterpolateTriggerValue",
            "Step Display Interpolation Trigger Value",
            True,
            float,
            'Step crossing display activation judgment value',
        ),
        ParamFieldInfo(
            "lockScoreOffset",
            "Lock Score Offset",
            True,
            float,
            'Lock score correction value',
        ),
        ParamFieldInfo(
            "pad12[8]",
            "Padding 12",
            False,
            pad_field(8),
            '',
        ),
    ],
}

__all__ = ["SP_EFFECT_PARAM_ST", "SP_EFFECT_VFX_PARAM_ST", "RESIDENT_FX_PARAM_ST"]

from soulstruct.base.params.utils import ParamFieldInfo, pad_field
from soulstruct.bloodborne.params.enums import *
from soulstruct.bloodborne.game_types import *


SP_EFFECT_BOOL = bool  # override u8

SP_EFFECT_PARAM_ST = {
    "param_type": "SP_EFFECT_PARAM_ST",
    "file_name": "SpEffectParam",
    "nickname": "SpecialEffects",
    "fields": [
        ParamFieldInfo(
            "iconId",
            "StatusIcon",
            True,
            Texture,
            "Icon that appears in HUD under stamina bar while special effect is active. Set to -1 for no icon.",
        ),
        ParamFieldInfo(
            "conditionHp",
            "MaxHPPercentageForEffect",
            True,
            float,
            "Special effect will only take effect if character's current HP is less than or equal to this "
            "percentage (from 0 to 100). Set to -1 for no HP condition.",
        ),
        ParamFieldInfo(
            "effectEndurance",
            "EffectDuration",
            True,
            float,
            "Duration of special effect. Set to 0 for an effect that occurs for only one frame (e.g. to award "
            "souls) or to -1 for an effect that will last until specifically removed or its source is lost (e.g. "
            "rings).",
        ),
        ParamFieldInfo(
            "motionInterval",
            "UpdateInterval",
            True,
            float,
            "Time (in seconds) between applications of the special effect, while active. Set to higher values to "
            "have the effect apply less frequently. Set to 0 to have it occur every frame.",
        ),
        ParamFieldInfo("maxHpRate", "MaxHPMultiplier", True, float, "Multiplier applied to maximum HP."),
        ParamFieldInfo(
            "maxMpRate",
            "MaxMPMultiplier",
            False,
            float,
            "Multiplier applied to maximum MP. (Unused in Dark Souls; does NOT refer to spell usages.)",
        ),
        ParamFieldInfo("maxStaminaRate", "MaxStaminaMultiplier", True, float, "Multiplier applied to maximum stamina."),
        ParamFieldInfo(
            "slashDamageCutRate",
            "IncomingSlashDamageMultiplier",
            True,
            float,
            "Multiplier applied to incoming slashing physical damage.",
        ),
        ParamFieldInfo(
            "blowDamageCutRate",
            "IncomingStrikeDamageMultiplier",
            True,
            float,
            "Multiplier applied to incoming striking physical damage.",
        ),
        ParamFieldInfo(
            "thrustDamageCutRate",
            "IncomingThrustDamageMultiplier",
            True,
            float,
            "Multiplier applied to incoming thrusting physical damage.",
        ),
        ParamFieldInfo(
            "neutralDamageCutRate",
            "IncomingNeutralDamageMultiplier",
            True,
            float,
            "Multiplier applied to incoming neutral physical damage.",
        ),
        ParamFieldInfo(
            "magicDamageCutRate",
            "IncomingMagicDamageMultiplier",
            True,
            float,
            "Multiplier applied to incoming magic damage.",
        ),
        ParamFieldInfo(
            "fireDamageCutRate",
            "IncomingFireDamageMultiplier",
            True,
            float,
            "Multiplier applied to incoming fire damage.",
        ),
        ParamFieldInfo(
            "thunderDamageCutRate",
            "IncomingLightningDamageMultiplier",
            True,
            float,
            "Multiplier applied to incoming lightning damage.",
        ),
        ParamFieldInfo(
            "physicsAttackRate",
            "OutgoingPhysicalDamageMultiplier",
            True,
            float,
            "Multiplier applied to outgoing physical damage (of any type).",
        ),
        ParamFieldInfo(
            "magicAttackRate",
            "OutgoingMagicDamageMultiplier",
            True,
            float,
            "Multiplier applied to outgoing magic damage.",
        ),
        ParamFieldInfo(
            "fireAttackRate",
            "OutgoingFireDamageMultiplier",
            True,
            float,
            "Multiplier applied to outgoing fire damage.",
        ),
        ParamFieldInfo(
            "thunderAttackRate",
            "OutgoingLightningDamageMultiplier",
            True,
            float,
            "Multiplier applied to outgoing lightning damage.",
        ),
        ParamFieldInfo(
            "physicsAttackPowerRate",
            "PhysicalAttackPowerMultiplier",
            True,
            float,
            "Multiplier applied to character's physical attack power (of any type).",
        ),
        ParamFieldInfo(
            "magicAttackPowerRate",
            "MagicAttackPowerMultiplier",
            True,
            float,
            "Multiplier applied to character's magic attack power.",
        ),
        ParamFieldInfo(
            "fireAttackPowerRate",
            "FireAttackPowerMultiplier",
            True,
            float,
            "Multiplier applied to character's fire attack power.",
        ),
        ParamFieldInfo(
            "thunderAttackPowerRate",
            "LightningAttackPowerMultiplier",
            True,
            float,
            "Multiplier applied to character's lightning attack power.",
        ),
        ParamFieldInfo(
            "physicsAttackPower",
            "PhysicalAttackPowerAddition",
            True,
            int,
            "Value to add to or subtract fromcharacter's physical attack power (of any type).",
        ),
        ParamFieldInfo(
            "magicAttackPower",
            "MagicAttackPowerAddition",
            True,
            int,
            "Value to add to or subtract fromcharacter's magic attack power.",
        ),
        ParamFieldInfo(
            "fireAttackPower",
            "FireAttackPowerAddition",
            True,
            int,
            "Value to add to or subtract fromcharacter's fire attack power.",
        ),
        ParamFieldInfo(
            "thunderAttackPower",
            "LightningAttackPowerAddition",
            True,
            int,
            "Value to add to or subtract fromcharacter's lightning attack power.",
        ),
        ParamFieldInfo(
            "physicsDiffenceRate",
            "PhysicalDefenseMultiplier",
            True,
            float,
            "Multiplier applied to character's physical defense (all types).",
        ),
        ParamFieldInfo(
            "magicDiffenceRate",
            "MagicDefenseMultiplier",
            True,
            float,
            "Multiplier applied to character's magic defense.",
        ),
        ParamFieldInfo(
            "fireDiffenceRate",
            "FireDefenseMultiplier",
            True,
            float,
            "Multiplier applied to character's fire defense.",
        ),
        ParamFieldInfo(
            "thunderDiffenceRate",
            "LightningDefenseMultiplier",
            True,
            float,
            "Multiplier applied to character's lightning defense.",
        ),
        ParamFieldInfo(
            "physicsDiffence",
            "PhysicalDefenseAddition",
            True,
            int,
            "Value to add to or subtract from character's physical defense.",
        ),
        ParamFieldInfo(
            "magicDiffence",
            "MagicDefenseAddition",
            True,
            int,
            "Value to add to or subtract from character's magic defense.",
        ),
        ParamFieldInfo(
            "fireDiffence",
            "FireDefenseAddition",
            True,
            int,
            "Value to add to or subtract from character's fire defense.",
        ),
        ParamFieldInfo(
            "thunderDiffence",
            "LightningDefenseAddition",
            True,
            int,
            "Value to add to or subtract from character's lightning defense.",
        ),
        ParamFieldInfo(
            "NoGuardDamageRate",
            "NoGuardIncomingDamageMultiplier",
            False,
            float,
            "Multiplier to use instead of usual multiplier if character is not guarding. (Always set to 0 in "
            "vanilla game, which must deactivate it. Only an educated guess that it refers to incoming damage, "
            "not outgoing.)",
        ),
        ParamFieldInfo(
            "vitalSpotChangeRate",
            "CriticalHitIncomingDamageMultiplier",
            False,
            float,
            "Multiplier to use instead of usual multiplier if character is hit in a weak spot. (Always set to -1 "
            "in vanilla game, which deactivates it. Only an educated guess that it affects incoming damage.)",
        ),
        ParamFieldInfo(
            "normalSpotChangeRate",
            "NonCriticalHitIncomingDamageMultiplier",
            False,
            float,
            "Multiplier to use instead of usual multiplier if character is *not* hit in a weak spot. (Always set "
            "to -1 in vanilla game, which deactivates it. Only an educated guess that it affects incoming "
            "damage.)",
        ),
        ParamFieldInfo(
            "maxHpChangeRate",
            "MaxHPChangeRatio",
            False,
            float,
            "Appears to be an unused variant of MaxHPMultiplier. Always set to 0.",
        ),
        ParamFieldInfo(
            "behaviorId",
            "BehaviorToTrigger",
            True,
            BehaviorParam,
            "Behavior ID to trigger (which can in turn trigger an Attack or Bullet) whenever special effect is "
            "applied. Set to -1 to use no behavior.",
        ),
        ParamFieldInfo(
            "changeHpRate",
            "HPReductionPercentage",
            True,
            float,
            "Percentage reduction of maximum HP (from 0 to 100). Negative values (to -100) will restore that "
            "percentage instead. Applied every time the special effect updates.",
        ),
        ParamFieldInfo(
            "changeHpPoint",
            "HPPointsLost",
            True,
            int,
            "HP value to subtract (if positive) or add (if negative) to character's current HP on every update of "
            "the special effect.",
        ),
        ParamFieldInfo(
            "changeMpRate",
            "MPReductionPercentage",
            False,
            float,
            "Percentage reduction of maximum MP (from 0 to 100). Negative values (to -100) will restore that "
            "percentage instead. Applied every time the special effect updates. (Unused in Dark Souls 1.)",
        ),
        ParamFieldInfo(
            "changeMpPoint",
            "MPPointsLost",
            False,
            int,
            "MP value to subtract (if positive) or add (if negative) to character's current MP on every update of "
            "the special effect. (Unused in Dark Souls 1.)",
        ),
        ParamFieldInfo(
            "mpRecoverChangeSpeed",
            "MPRecoverySpeedChange",
            False,
            int,
            "Points added to or subtracted from MP recovery formula. (Unused in Dark Souls 1.)",
        ),
        ParamFieldInfo(
            "changeStaminaRate",
            "StaminaReductionPercentage",
            True,
            float,
            "Percentage reduction of maximum stamina (from 0 to 100). Negative values (to -100) will restore that "
            "percentage instead. Applied every time the special effect updates.",
        ),
        ParamFieldInfo(
            "changeStaminaPoint",
            "StaminaPointsLost",
            True,
            int,
            "Stamina value to subtract (if positive) or add (if negative) to character's current stamina on every "
            "update of the special effect.",
        ),
        ParamFieldInfo(
            "staminaRecoverChangeSpeed",
            "StaminaRecoverySpeedChange",
            True,
            int,
            "Points added to or subtracted from stamina recovery formula. I believe this affects the amount of "
            "stamina restored every second. (For reference, a Green Blossom adds 40 points.)",
        ),
        ParamFieldInfo(
            "magicEffectTimeChange",
            "MagicEffectTimeChange",
            False,
            float,
            "Name suggests this changes the duration of magic effects, but it is never used (always zero).",
        ),
        ParamFieldInfo(
            "insideDurability",
            "CurrentDurabilityAddition",
            True,
            int,
            "Amount of durability to subtract (if positive) or add (if negative) to current durability on every "
            "update of the special effect. The equipment affected is determined by... ",
        ),
        # TODO
        ParamFieldInfo(
            "maxDurability",
            "MaxDurabilityAddition",
            True,
            int,
            "Amount of durability to subtract (if positive) or add (if negative) to the character's maximum "
            "durability while the special effect is active. The equipment affected is determined by... ",
        ),
        # TODO
        ParamFieldInfo(
            "staminaAttackRate",
            "OutgoingStaminaDamageMultiplier",
            True,
            float,
            "Multiplier applied to the amount of damage dealt to targets' stamina.",
        ),
        ParamFieldInfo(
            "poizonAttackPower",
            "PoisonDamage",
            True,
            int,
            "Amount of poison damage (in units of resistance) added to the character on every update. Negative "
            "values will heal poison damage instead (e.g. Purple Moss Clump). Unclear how this distinguishes "
            "between reducing build-up and actually healing the status.",
        ),
        ParamFieldInfo(
            "registIllness",
            "ToxicDamage",
            True,
            int,
            "Amount of toxic damage (in units of resistance) added to the character on every update. Negative "
            "values will heal toxic damage instead (e.g. Blooming Purple Moss Clump). Unclear how this "
            "distinguishes between reducing build-up and actually healing the status.",
        ),
        ParamFieldInfo(
            "registBlood",
            "BleedDamage",
            True,
            int,
            "Amount of bleed damage (in units of resistance) added to the character on every update. Negative "
            "values will heal bleed damage instead (e.g. Blood-Red Moss Clump). Unclear how this distinguishes "
            "between reducing build-up and actually healing the status.",
        ),
        ParamFieldInfo(
            "registCurse",
            "CurseDamage",
            True,
            int,
            "Amount of curse damage (in units of resistance) added to the character on every update. Negative "
            "values will heal curse damage instead (e.g. Purging Stone). Unclear how this distinguishes between "
            "reducing build-up and actually healing the status.",
        ),
        ParamFieldInfo(
            "fallDamageRate",
            "FallDamageMultiplier",
            True,
            float,
            "Multiplier applied to amount of fall damage taken by character. Cannot prevent lethal falls.",
        ),
        ParamFieldInfo(
            "soulRate",
            "SoulsFromKillsMultiplier",
            True,
            float,
            "Multiplier applied to the amount of souls received when enemies or bosses are killed.",
        ),
        ParamFieldInfo(
            "equipWeightChangeRate",
            "MaxEquipLoadMultiplier",
            True,
            float,
            "Multiplier applied to the character's maximum equip load.",
        ),
        ParamFieldInfo(
            "allItemWeightChangeRate",
            "MaxItemLoadMultiplier",
            False,
            float,
            "Multiplier applied to how much the character can carry, equipped or not. Seems to have no effect in "
            "Dark Souls 1.",
        ),
        ParamFieldInfo(
            "soul",
            "SoulAmountChange",
            True,
            int,
            "Amount of souls received (if positive) or taken away (if negative) every time the special effect is "
            "updated.",
        ),
        ParamFieldInfo(
            "animIdOffset",
            "AnimationIDOffset",
            True,
            int,
            "Override default animation ID offset of character, which can change their animation set temporarily.",
        ),
        ParamFieldInfo(
            "haveSoulRate",
            "SoulRewardMultiplier",
            True,
            float,
            "Multiplier applied to the amount of souls given to the player when they kill this character (e.g. "
            "enemies in NG+).",
        ),
        ParamFieldInfo(
            "targetPriority",
            "TargetPriorityChange",
            True,
            float,
            "Value added to or subtract from this character's priority in the target queue. Higher priority means "
            "they are more likely to be targeted by enemies.",
        ),
        ParamFieldInfo(
            "sightSearchEnemyCut",
            "EnemySightPercentageReduction",
            True,
            int,
            "Percentage reduction in enemy sight (from 0 to 100) when looking for this character. Not sure if "
            "negative values can be used to make this character *more* visible.",
        ),
        ParamFieldInfo(
            "hearingSearchEnemyRate",  # TODO: "rate" rather than "cut" in Bloodborne. Guessing additive.
            "EnemyHearingMultiplier",
            True,
            int,
            "Percentage multiplier in enemy hearing range when looking for this character.",
        ),
        ParamFieldInfo(
            "grabityRate",
            "AnimationSpeedMultiplier",
            True,
            float,
            "Multiplier applied to all of this character's animations. Values other than 1 can lead to cool but "
            "potentially glitchy behavior (e.g. desynchronized grab animations and missed collision).",
        ),
        ParamFieldInfo(
            "registPoizonChangeRate",
            "PoisonResistanceMultiplier",
            True,
            float,
            "Multiplier applied to character's maximum poison resistance.",
        ),
        ParamFieldInfo(
            "registIllnessChangeRate",
            "ToxicResistanceMultiplier",
            True,
            float,
            "Multiplier applied to character's maximum toxic resistance.",
        ),
        ParamFieldInfo(
            "registBloodChangeRate",
            "BleedResistanceMultiplier",
            True,
            float,
            "Multiplier applied to character's maximum bleed resistance.",
        ),
        ParamFieldInfo(
            "registCurseChangeRate",
            "CurseResistanceMultiplier",
            True,
            float,
            "Multiplier applied to character's maximum curse resistance.",
        ),
        ParamFieldInfo(
            "soulStealRate",
            "SoulStealMultiplier",
            False,
            float,
            "Internal description says 'defense against HP when NPCs are robbed by soul steal'. Probably unused.",
        ),
        ParamFieldInfo(
            "lifeReductionRate",
            "EffectDurationMultiplier",
            False,
            float,
            "Multiplier applied to the duration of the effect specified in EffectDurationMultiplierType. Used "
            "only by Hawkeye Gough to reduce poison and toxic duration in vanilla game.",
        ),
        ParamFieldInfo(
            "hpRecoverRate",
            "HPRecoveryRate",
            True,
            float,
            "Multiplier applied to any increase in character's current HP.",
        ),
        ParamFieldInfo(
            "replaceSpEffectId",
            "NextSpecialEffect",
            True,
            SpecialEffectParam,
            "Special effect to apply to character automatically when this special effect ends (if not terminated "
            "manually by an event).",
        ),
        ParamFieldInfo(
            "cycleOccurrenceSpEffectId",
            "SpecialEffectPerUpdate",
            True,
            SpecialEffectParam,
            "Special effect to apply to character every time this special effect updates (e.g. Symbol of Avarice "
            "HP reduction).",
        ),
        ParamFieldInfo(
            "atkOccurrenceSpEffectId",
            "SpecialEffectOnAttack",
            True,
            SpecialEffectParam,
            "Special effect to apply to any target hit by an attack.\n\nWARNING: This will not trigger unless "
            "SpecialStateIndex is set to 152 (Rotten Pine Resin effect), which will in turn cause your weapon to "
            "glow purple unless the visual effect is disabled.",
        ),
        ParamFieldInfo("guardDefFlickPowerRate", "GuardDefenseFlickPowerRate", False, float, "Unknown; never used."),
        ParamFieldInfo(
            "guardStaminaCutRate",
            "GuardStaminaMultiplier",
            True,
            float,
            "Values larger than 1 mean *less* stamina is used when blocking.",
        ),
        ParamFieldInfo(
            "rayCastPassedTime",
            "RayCastPassingTime",
            False,
            int,
            "Internal description says 'Gaze passing: activation time (milliseconds).' Likely unused.",
        ),
        ParamFieldInfo(
            "changeSuperArmorPoint",
            "PoiseAddition",
            True,
            int,
            "Amount added (if positive) or subtracted (if negative) from character's poise.",
        ),
        ParamFieldInfo(
            "bowDistRate",
            "BowRangePercentageChange",
            True,
            int,
            "Percentage change (from 0 to 100) in bow range. Requires SpecialStateIndex BowBoostRange (168) to "
            "work.",
        ),
        ParamFieldInfo(
            "spCategory",
            "SpecialEffectCategory",
            True,
            SP_EFFECT_SPCATEGORY,
            "Category of special effect. This effect will override (i.e. cancel out) all other active effects "
            "with the same category when it is added.",
        ),
        ParamFieldInfo(
            "categoryPriority",
            "SpecialEffectPriority",
            True,
            int,
            "Priority ordering for special effect to be applied on each update (lower values are updated first).",
        ),
        ParamFieldInfo(
            "saveCategory",
            "SaveCategory",
            True,
            SP_EFFECT_SAVE_CATEGORY,
            "Determines automatic game saving behavior (used for status ailments only). Set to -1 for no saving.",
        ),
        ParamFieldInfo(
            "changeMagicSlot",
            "AttunementSlotCountChange",
            True,
            int,
            "Increase (positive) or decrease (negative) number of attunement slots available.",
        ),
        ParamFieldInfo(
            "changeMiracleSlot",
            "AttunementMiracleSlotCountChange",
            False,
            int,
            "Miracle slots are not even separate from other magic slots, so this is likely an abandoned field.",
        ),
        ParamFieldInfo(
            "heroPointDamage",
            "HumanityDamage",
            True,
            int,
            "Damage applied to soft humanity count. Negative values will add soft humanity.",
        ),
        ParamFieldInfo(
            "defFlickPower",
            "RiposteDefenseAddition",
            True,
            int,
            "Value added to or subtracted from defense against riposte attacks.",
        ),
        ParamFieldInfo(
            "flickDamageCutRate",
            "FlickDamageMultiplier",
            True,
            int,
            "Multiplier to use instead of usual multiplier on incoming (I assume) riposte attacks. Never used.",
        ),
        ParamFieldInfo(
            "bloodDamageRate",
            "IncomingBleedDamagePercentage",
            True,
            int,
            "Percentage of incoming bleed damage received (usually 100).",
        ),
        ParamFieldInfo(
            "dmgLv_None",
            "ReplaceNoImpactLevel",
            True,
            ATKPARAM_REP_DMGTYPE,
            "Impact level that will occur instead of NoImpact level.",
        ),
        ParamFieldInfo(
            "dmgLv_S",
            "ReplaceSmallImpactLevel",
            True,
            ATKPARAM_REP_DMGTYPE,
            "Impact level that will occur instead of Small impact level.",
        ),
        ParamFieldInfo(
            "dmgLv_M",
            "ReplaceMediumImpactLevel",
            True,
            ATKPARAM_REP_DMGTYPE,
            "Impact level that will occur instead of Medium impact level.",
        ),
        ParamFieldInfo(
            "dmgLv_L",
            "ReplaceLargeImpactLevel",
            True,
            ATKPARAM_REP_DMGTYPE,
            "Impact level that will occur instead of Large impact level.",
        ),
        ParamFieldInfo(
            "dmgLv_BlowM",
            "ReplaceBlowoffImpactLevel",
            True,
            ATKPARAM_REP_DMGTYPE,
            "Impact level that will occur instead of Blowoff impact level.",
        ),
        ParamFieldInfo(
            "dmgLv_Push",
            "ReplacePushImpactLevel",
            True,
            ATKPARAM_REP_DMGTYPE,
            "Impact level that will occur instead of Push impact level.",
        ),
        ParamFieldInfo(
            "dmgLv_Strike",
            "ReplaceStrikeImpactLevel",
            True,
            ATKPARAM_REP_DMGTYPE,
            "Impact level that will occur instead of Strike impact level.",
        ),
        ParamFieldInfo(
            "dmgLv_BlowS",
            "ReplaceSmallBlowImpactLevel",
            True,
            ATKPARAM_REP_DMGTYPE,
            "Impact level that will occur instead of Blow impact level.",
        ),
        ParamFieldInfo(
            "dmgLv_Min",
            "ReplaceMinimalImpactLevel",
            True,
            ATKPARAM_REP_DMGTYPE,
            "Impact level that will occur instead of Minimal impact level.",
        ),
        ParamFieldInfo(
            "dmgLv_Uppercut",
            "ReplaceLaunchImpactLevel",
            True,
            ATKPARAM_REP_DMGTYPE,
            "Impact level that will occur instead of Launch impact level.",
        ),
        ParamFieldInfo(
            "dmgLv_BlowLL",
            "ReplaceBlowBackwardImpactLevel",
            True,
            ATKPARAM_REP_DMGTYPE,
            "Impact level that will occur instead of BlowBackward impact level.",
        ),
        ParamFieldInfo(
            "dmgLv_Breath",
            "ReplaceBreathBurnImpactLevel",
            True,
            ATKPARAM_REP_DMGTYPE,
            "Impact level that will occur instead of BreathBurn impact level.",
        ),
        ParamFieldInfo(
            "atkAttribute",
            "AttackAttribute",
            True,
            ATKPARAM_ATKATTR_TYPE,
            "Attack type attached to hits while special effect is active.",
        ),
        ParamFieldInfo(
            "spAttribute",
            "ElementAttribute",
            True,
            ATKPARAM_SPATTR_TYPE,
            "Element attached to hits while special effect is active.",
        ),
        # TODO: right click can edit numeric entry directly.
        ParamFieldInfo(
            "stateInfo",
            "SpecialState",
            True,
            SpecialStateInfo,
            "Hard-coded special state to use. Also determines visual effect from Special Effect Visuals table.",
        ),
        ParamFieldInfo(
            "wepParamChange",
            "AffectedWeaponType",
            True,
            SP_EFE_WEP_CHANGE_PARAM,
            "Weapon category that is affected by special effect. ",
        ),
        ParamFieldInfo(
            "moveType",
            "MovementType",
            True,
            SP_EFFECT_MOVE_TYPE,
            "Determines how movement is affected. (Does not correspond to Movement param entries.)",
        ),
        ParamFieldInfo(
            "lifeReductionType",
            "EffectDurationMultiplierType",
            False,
            int,
            "Type of effect whose duration is affected by EffectDurationMultiplier. Known values: 2 = poison, "
            "5 = toxic.",
        ),
        ParamFieldInfo(
            "throwCondition",
            "ThrowCondition",
            True,
            SP_EFFECT_THROW_CONDITION_TYPE,
            "Determines how throws are affected while special effect is active. Values still unknown (rarely "
            "used).",
        ),
        ParamFieldInfo(
            "addBehaviorJudgeId_condition",
            "AddBehaviorJudgeIDCondition",
            False,
            int,
            "Unclear; used only to manage the Hydra as more heads are cut off. All other values are -1.",
        ),
        ParamFieldInfo(
            "addBehaviorJudgeId_add",
            "AddBehaviorJudgeIDAdd",
            False,
            int,
            "Always zero. Unknown effect. Internal description suggests that this is a constant added to all "
            "behavior judge IDs (from TAE) issued by character.",
        ),
        ParamFieldInfo("effectTargetSelf:1", "CanAffectSelf", True, bool, "Effect will target self."),
        ParamFieldInfo("effectTargetFriend:1", "CanAffectAlly", True, bool, "Effect will target self."),
        ParamFieldInfo("effectTargetEnemy:1", "CanAffectEnemy", True, bool, "Effect will target enemies."),
        ParamFieldInfo("effectTargetPlayer:1", "CanAffectPlayer", True, bool, "Effect will target player characters."),
        ParamFieldInfo("effectTargetAI:1", "CanAffectAI", True, bool, "Effect will target non-player characters."),
        ParamFieldInfo("effectTargetLive:1", "CanAffectPlayers", True, bool, "Effect will target humans."),
        ParamFieldInfo(
            "effectTargetGhost:1", "CanAffectPhantoms", True, bool, "Effect will target phantoms (white or black)."
        ),
        ParamFieldInfo(
            "effectTargetWhiteGhost:1", "CanAffectWhitePhantoms", True, bool, "Effect will target white phantoms."
        ),
        ParamFieldInfo(
            "effectTargetBlackGhost:1", "CanAffectBlackPhantoms", True, bool, "Effect will target white phantoms."
        ),
        ParamFieldInfo(
            "effectTargetAttacker:1",
            "CanAffectAttacker",
            True,
            bool,
            "Effect will target character when they attack (e.g. HP drain).",
        ),
        ParamFieldInfo(
            "dispIconNonactive:1",
            "DisplayIconWhenInactive",
            False,
            bool,
            "Display icon even when special effect is inactive (not sure what that means). Never enabled.",
        ),
        ParamFieldInfo(
            "useSpEffectEffect:1",
            "UseVisualEffect",
            True,
            bool,
            "Use visual effect from Special Effect Visuals table (indexed by Special State field).",
        ),
        ParamFieldInfo(
            "bAdjustMagicAblity:1",
            "UseIntelligenceScaling",
            True,
            bool,
            "If True, special effect damage will be scaled by character intelligence (I believe).",
        ),
        ParamFieldInfo(
            "bAdjustFaithAblity:1",
            "UseFaithScaling",
            True,
            bool,
            "If True, special effect damage will be scaled by character faith (I believe).",
        ),
        ParamFieldInfo(
            "bGameClearBonus:1",
            "ForNewGamePlus",
            True,
            bool,
            "If True, this effect will be applied multiple times depending on the NG+ cycle (I think).",
        ),
        ParamFieldInfo(
            "magParamChange:1", "AffectsMagic", True, bool, "If True, multipliers will be applied to magic attacks."
        ),
        ParamFieldInfo(
            "miracleParamChange:1",
            "AffectsMiracles",
            True,
            bool,
            "If True, multipliers will be applied to miracle attacks.",
        ),
        ParamFieldInfo("clearSoul:1", "ClearSoul", False, bool, "Unused Demon's Souls remnant."),
        ParamFieldInfo("requestSOS:1", "RequestWhitePhantomSummon", False, bool, "Used only by White Sign Soapstone."),
        ParamFieldInfo(
            "requestBlackSOS:1", "RequestBlackPhantomSummon", False, bool, "Used only by Red Sign Soapstone."
        ),
        ParamFieldInfo(
            "requestForceJoinBlackSOS:1", "RequestInvasion", False, bool, "Used only be (Cracked) Red Eye Orb."
        ),
        ParamFieldInfo(
            "requestKickSession:1",
            "RequestKick",
            False,
            bool,
            "Not used by any item. Likely kicks all clients out of your world.",
        ),
        ParamFieldInfo(
            "requestLeaveSession:1",
            "RequestReturnToOwnWorld",
            False,
            bool,
            "Used only by Black Separation Crystal.",
        ),
        ParamFieldInfo(
            "requestNpcInveda:1",
            "RequestNPCInvasion",
            False,
            bool,
            "Used only by Black Eye Orb (Lautrec quest and cut Shiva quest).",
        ),
        ParamFieldInfo("noDead:1", "Immortal", True, bool, "If True, character cannot die. Never used in vanilla game."),
        ParamFieldInfo(
            "bCurrHPIndependeMaxHP:1",
            "CurrentHPIgnoresMaxHPChange",
            True,
            bool,
            "If True, changes to maximum HP will not affect current HP (unless it must be reduced to new maximum).",
        ),
        ParamFieldInfo(
            "corrosionIgnore:1",
            "IgnoreCorrosion",
            False,
            bool,
            "If True, character will ignore corrosion damage to durability. Used only by Demon's Souls junk.",
        ),
        ParamFieldInfo(
            "sightSearchCutIgnore:1",
            "IgnoreSightReduction",
            False,
            bool,
            "If True, character will ignore any changes to their sight range from other special effects. Used "
            "only by Demon's Souls junk.",
        ),
        ParamFieldInfo(
            "hearingSearchCutIgnore:1",
            "IgnoreHearingReduction",
            False,
            bool,
            "If True, character will ignore any changes to their hearing range from other special effects. Used "
            "only by Demon's Souls junk.",
        ),
        ParamFieldInfo(
            "antiMagicIgnore:1",
            "IgnoreMagicDisabling",
            False,
            bool,
            "If True, character will ignore any special effect that attempts to disable their magic. Used only by "
            "Demon's Souls junk.",
        ),
        ParamFieldInfo("fakeTargetIgnore:1", "IgnoreFakeTargets", False, bool, "Unknown; never used."),
        ParamFieldInfo("fakeTargetIgnoreUndead:1", "IgnoreUndeadFakeTargets", False, bool, "Unknown; never used."),
        ParamFieldInfo("fakeTargetIgnoreAnimal:1", "IgnoreBeastFakeTargets", False, bool, "Unknown; never used."),
        ParamFieldInfo(
            "grabityIgnore:1", "IgnoreGravity", True, bool, "Ignore gravity. (Not sure if this actually works.)"
        ),
        ParamFieldInfo("disablePoison:1", "PoisonImmunity", True, bool, "Immune to poison."),
        ParamFieldInfo("disableDisease:1", "ToxicImmunity", True, bool, "Immune to toxic."),
        ParamFieldInfo("disableBlood:1", "BleedImmunity", True, bool, "Immune to curse."),
        ParamFieldInfo("disableCurse:1", "CurseImmunity", True, bool, "Immune to poison."),
        ParamFieldInfo(
            "enableCharm:1",
            "EnableCharming",
            False,
            bool,
            "Not sure if this refers to the Alluring Skull. May not work at all.",
        ),
        ParamFieldInfo(
            "enableLifeTime:1",
            "EnableLifeTime",
            False,
            bool,
            "Internal description: 'Is the life extended when setting a flag by TAE?'. Effect unknown. Used by "
            "Dragon Head and Torso Stones and some internal summon-related effects.",
        ),
        ParamFieldInfo(
            "hasTarget : 1",
            "HasTarget",
            False,
            bool,
            "For unused 'evil eye' mechanics, probably a Demon's Souls remnant.",
        ),
        ParamFieldInfo(
            "isFireDamageCancel:1",
            "FireImmunity",
            True,
            bool,
            "Immune to fire damage. Never enabled, and may not actually work. Needs testing.",
        ),
        ParamFieldInfo(
            "isExtendSpEffectLife:1",
            "AffectedByEffectExtension",
            True,
            bool,
            "If True, this special effect will be affected by special state (193), i.e. the effect used by the "
            "vanilla Lingering Dragoncrest Ring, that extends effect durations.",
        ),
        ParamFieldInfo(
            "requestLeaveColiseumSession:1",
            "RequestColiseumExit",
            False,
            bool,
            "Used only by Purple Coward's Crystal.",
        ),
        ParamFieldInfo("disableTherianthrope:1", "DisableBeast", True, SP_EFFECT_BOOL, ""),
        ParamFieldInfo("chargeAttackParamChange:1", "ChargeAttackParamChange", True, SP_EFFECT_BOOL, ""),
        ParamFieldInfo("throwAttackParamChange:1", "GrabAttackParamChange", True, SP_EFFECT_BOOL, ""),
        ParamFieldInfo("enableEquipSlotCheck:1", "EnableEquipSlotCheck", True, SP_EFFECT_BOOL, ""),
        ParamFieldInfo(
            "vowType0:1",
            "AffectsCharactersWithNoCovenant",
            True,
            bool,
            "Determines if this special effect will affect characters with no covenant.",
        ),
        ParamFieldInfo(
            "vowType1:1",
            "AffectsWayOfWhite",
            True,
            bool,
            "Determines if this special effect will affect characters in the Way of White covenant.",
        ),
        ParamFieldInfo(
            "vowType2:1",
            "AffectsPrincessGuard",
            True,
            bool,
            "Determines if this special effect will affect characters in the Princess's Guard covenant.",
        ),
        ParamFieldInfo(
            "vowType3:1",
            "AffectsWarriorOfSunlight",
            True,
            bool,
            "Determines if this special effect will affect characters in the Warriors of Sunlight covenant.",
        ),
        ParamFieldInfo(
            "vowType4:1",
            "AffectsDarkwraith",
            True,
            bool,
            "Determines if this special effect will affect characters in the Darkwraith covenant.",
        ),
        ParamFieldInfo(
            "vowType5:1",
            "AffectsPathOfTheDragon",
            True,
            bool,
            "Determines if this special effect will affect characters in the Path of the Dragon covenant.",
        ),
        ParamFieldInfo(
            "vowType6:1",
            "AffectsGravelordServant",
            True,
            bool,
            "Determines if this special effect will affect characters in the Gravelord Servant covenant.",
        ),
        ParamFieldInfo(
            "vowType7:1",
            "AffectsForestHunter",
            True,
            bool,
            "Determines if this special effect will affect characters in the Forest Hunters covenant.",
        ),
        ParamFieldInfo(
            "vowType8:1",
            "AffectsDarkmoonBlade",
            True,
            bool,
            "Determines if this special effect will affect characters in the Blades of the Darkmoon covenant.",
        ),
        ParamFieldInfo(
            "vowType9:1",
            "AffectsChaosServant",
            True,
            bool,
            "Determines if this special effect will affect characters in the Chaos Servants covenant.",
        ),
        ParamFieldInfo(
            "vowType10:1",
            "AffectsCovenant10",
            False,
            bool,
            "Determines if this special effect will affect characters in unused covenant.",
        ),
        ParamFieldInfo(
            "vowType11:1",
            "AffectsCovenant11",
            False,
            bool,
            "Determines if this special effect will affect characters in unused covenant.",
        ),
        ParamFieldInfo(
            "vowType12:1",
            "AffectsCovenant12",
            False,
            bool,
            "Determines if this special effect will affect characters in unused covenant.",
        ),
        ParamFieldInfo(
            "vowType13:1",
            "AffectsCovenant13",
            False,
            bool,
            "Determines if this special effect will affect characters in unused covenant.",
        ),
        ParamFieldInfo(
            "vowType14:1",
            "AffectsCovenant14",
            False,
            bool,
            "Determines if this special effect will affect characters in unused covenant.",
        ),
        ParamFieldInfo(
            "vowType15:1",
            "AffectsCovenant15",
            False,
            bool,
            "Determines if this special effect will affect characters in unused covenant.",
        ),
        ParamFieldInfo("effectTargetOpposeTarget:1", "EffectTargetsEnemyTarget", True, SP_EFFECT_BOOL, ""),
        ParamFieldInfo("effectTargetFriendlyTarget:1", "EffectTargetsAllyTarget", True, SP_EFFECT_BOOL, ""),
        ParamFieldInfo("effectTargetSelfTarget:1", "EffectTargetsSelfTarget", True, SP_EFFECT_BOOL, ""),
        ParamFieldInfo("deathcauseId", "DeathCauseID", True, int, ""),
        ParamFieldInfo("antiDarkSightRadius", "AntiDarkSightRadius", True, float, ""),
        ParamFieldInfo("antiDarkSightDmypolyId", "AntiDarkSightModelPoint", True, int, ""),
        ParamFieldInfo("sightSearchRate", "SightSearchRate", True, float, ""),
        ParamFieldInfo("hearingSearchRate", "HearingSearchRate", True, float, ""),
        ParamFieldInfo("registTherianthrope", "ResistBeast", True, int, ""),
        ParamFieldInfo("registTherianthropeChangeRate", "ResistBeastChangeRate", True, float, ""),
        ParamFieldInfo("changeTeamType", "ChangeTeamType", True, SP_EFFECT_CHANGE_TEAM_TYPE, ""),
        ParamFieldInfo("bAdjustStrengthAblity:1", "UseStrengthScaling", True, SP_EFFECT_BOOL, ""),
        ParamFieldInfo("bAdjustAgilityAblity:1", "UseDexterityScaling", True, SP_EFFECT_BOOL, ""),
        ParamFieldInfo("weaponConvertAttribute", "WeaponConvertAttribute", True, SP_EFFECT_CONVERT_ATTRIBUTE, ""),
        ParamFieldInfo("changeMaxQuantity", "ChangeMaxQuantity", True, int, ""),
        ParamFieldInfo("slashAttackRate", "SlashAttackRate", True, float, ""),
        ParamFieldInfo("blowAttackRate", "BluntAttackRate", True, float, ""),
        ParamFieldInfo("thrustAttackRate", "ThrustAttackRate", True, float, ""),
        ParamFieldInfo("neutralAttackRate", "NeutralAttackRate", True, float, ""),
        ParamFieldInfo("slashAttackPowerRate", "SlashAttackPowerRate", True, float, ""),
        ParamFieldInfo("blowAttackPowerRate", "BluntAttackPowerRate", True, float, ""),
        ParamFieldInfo("thrustAttackPowerRate", "ThrustAttackPowerRate", True, float, ""),
        ParamFieldInfo("neutralAttackPowerRate", "NeutralAttackPowerRate", True, float, ""),
        ParamFieldInfo("slashAttackPower", "SlashAttackPower", True, int, ""),
        ParamFieldInfo("blowAttackPower", "BluntAttackPower", True, int, ""),
        ParamFieldInfo("thrustAttackPower", "ThrustAttackPower", True, int, ""),
        ParamFieldInfo("neutralAttackPower", "NeutralAttackPower", True, int, ""),
        ParamFieldInfo("consumeStaminaRate", "StaminaConsumptionRate", True, float, ""),
        ParamFieldInfo("addBulletNum", "AddBullets", True, int, ""),
        ParamFieldInfo("validCond_PCWeponState", "ValidConditionPlayerWeaponState", True, SP_EFE_PC_WEAPON_STATE, ""),
        ParamFieldInfo("addTempBulletNum", "AddBloodBullets", True, int, ""),
        ParamFieldInfo("regainGaugeDamage", "RegainGaugeDamage", True, SP_EFFECT_BOOL, ""),
        ParamFieldInfo("changeStrengthPoint", "ChangeStrength", True, int, ""),
        ParamFieldInfo("changeAgilityPoint", "ChangeDexterity", True, int, ""),
        ParamFieldInfo("changeMagicPoint", "ChangeBloodtinge", True, int, ""),
        ParamFieldInfo("changeFaithPoint", "ChangeArcane", True, int, ""),
        ParamFieldInfo("changePoisonResistPoint", "ChangePoisonResistance", True, int, ""),
        ParamFieldInfo("changeDiseaseResistPoint", "ChangeToxicResistance", True, int, ""),
        ParamFieldInfo("changeBloodResistPoint", "ChangeBleedingResistance", True, int, ""),
        ParamFieldInfo("changeCurseResistPoint", "ChangeFrenzyResistance", True, int, ""),
        ParamFieldInfo("changeTherianthropeResistPoint", "ChangeBeastResistance", True, int, ""),
        ParamFieldInfo("antiDemonDamageCorrectRate", "DemonDamageMultiplier", True, float, ""),
        ParamFieldInfo("antiSaintDamageCorrectRate", "HolyDamageMultiplier", True, float, ""),
        ParamFieldInfo("antiWeakA_DamageCorrectRate", "WeakADamageMultiplier", True, float, ""),
        ParamFieldInfo("antiWeakB_DamageCorrectRate", "WeakBDamageMultiplier", True, float, ""),
        ParamFieldInfo("regainRate", "RegainRate", True, float, ""),
        ParamFieldInfo("conditionHpRate", "ConditionHPRate", True, float, ""),
        ParamFieldInfo("itemDropRate", "ItemDropRate", True, float, ""),
        ParamFieldInfo("transfusionHpRate", "TransfusionHPRate", True, float, ""),
        ParamFieldInfo("transfusionHpPoint", "TransfusionHPPoints", True, int, ""),
        ParamFieldInfo("transfusionHpRecoverRate", "TransfusionHPRecoveryRate", True, float, ""),
        ParamFieldInfo("validCond_StateInfo", "ValidConditionStateInfo", True, SP_EFFECT_TYPE, ""),
        ParamFieldInfo("pad3[2]", "Pad", False, pad_field(2), ""),
    ],
}


SP_EFFECT_VFX_PARAM_ST = {
    "param_type": "SP_EFFECT_VFX_PARAM_ST",
    "file_name": "SpEffectVfxParam",
    "nickname": "SpecialEffectVisuals",
    "fields": [
        ParamFieldInfo(
            "effectType", "EffectType", True, SP_EFFECT_VFX_EFFECT_TYPE, "Type of effect. Enum not yet mapped."
        ),
        ParamFieldInfo(
            "midstSfxId",
            "OngoingVisualEffect",
            True,
            VisualEffect,
            "Ongoing visual effect for special effect. -1 is no effect.",
        ),
        ParamFieldInfo(
            "midstSeId",
            "OngoingSoundEffect",
            True,
            SFXSound,
            "Ongoing sound effect for special effect. -1 is no effect.",
        ),
        ParamFieldInfo(
            "midstDmyId",
            "OngoingModelPoint",
            True,
            int,
            "Model point where ongoing effects are centered. -1 is model root.",
        ),
        ParamFieldInfo(
            "initSfxId",
            "InitialVisualEffect",
            True,
            VisualEffect,
            "One-off visual effect when special effect begins. -1 is no effect.",
        ),
        ParamFieldInfo(
            "initSeId",
            "InitialSoundEffect",
            False,
            SFXSound,
            "One-off sound effect when special effect begins. -1 is no effect. (Does not appear to work.)",
        ),
        ParamFieldInfo(
            "initDmyId",
            "InitialModelPoint",
            True,
            int,
            "Model point where initial effect is centered. -1 is model root.",
        ),
        ParamFieldInfo(
            "finishSfxId",
            "FinishVisualEffect",
            True,
            VisualEffect,
            "One-off visual effect when special effect ends. -1 is no effect.",
        ),
        ParamFieldInfo(
            "finishSeId",
            "FinishSoundEffect",
            False,
            SFXSound,
            "One-off sound effect when special effect ends. -1 is no effect. (Does not appear to work.)",
        ),
        ParamFieldInfo(
            "finishDmyId",
            "FinishModelPoint",
            True,
            int,
            "Model point where finish effect is centered. -1 is model root.",
        ),
        ParamFieldInfo(
            "camouflageBeginDist", "HideStartDistance", True, float, "Closest distance at which effect is disabled."
        ),
        ParamFieldInfo(
            "camouflageEndDist", "HideEndDistance", True, float, "Furthest distance at which effect is disabled."
        ),
        ParamFieldInfo(
            "transformProtectorId",
            "TransformationArmorID",
            True,
            ArmorParam,
            "Transformation armor ID. Unknown effect. -1 is no armor.",
        ),
        ParamFieldInfo(
            "soulParamIdForWepEnchant",
            "WeaponEnchantmentSoulParam",
            True,
            SP_EFFECT_VFX_SOUL_PARAM_TYPE,
            "Internal description: 'Soul Param ID for weapon enchantment.' Enum not yet mapped.",
        ),
        ParamFieldInfo(
            "playCategory",
            "PlaybackCategory",
            True,
            SP_EFFECT_VFX_PLAYCATEGORY,
            "Only one effect in each category can be active at once (determined by PlaybackPriority).",
        ),
        ParamFieldInfo(
            "playPriority",
            "PlaybackPriority",
            True,
            int,
            "Only the lowest-numbered-priority effect in each PlaybackCategory will be active at once.",
        ),
        ParamFieldInfo(
            "existEffectForLarge:1",
            "LargeEffectExists",
            True,
            bool,
            "Indicates if a large version of the effect exists.",
        ),
        ParamFieldInfo(
            "existEffectForSoul:1",
            "SoulEffectExists",
            True,
            bool,
            "Indicates if a 'soul version' of the effect exists.",
        ),
        ParamFieldInfo(
            "effectInvisibleAtCamouflage:1",
            "InvisibleWhenHidden",
            True,
            bool,
            "Indicates if the effect should be invisible when hidden (unclear exactly what this means).",
        ),
        ParamFieldInfo(
            "useCamouflage:1",
            "HidingActive",
            True,
            bool,
            "I believe this determines if the hiding range fields are actually used.",
        ),
        ParamFieldInfo("invisibleAtFriendCamouflage:1", "InvisibleWhenFriendHidden", True, bool, "Unclear."),
        ParamFieldInfo(
            "addMapAreaBlockOffset:1",
            "AddMapAreaBlockOffset",
            True,
            bool,
            "If enabled, the three-digit area/block number for the current map will be added to all effect IDs ("
            "e.g. m13_02 -> adds 132).",
        ),
        ParamFieldInfo(
            "halfCamouflage:1",
            "HalfHiddenOnly",
            True,
            bool,
            "If enabled, effects are made semi-transparent rather than fully hidden.",
        ),
        ParamFieldInfo(
            "transformArmor:1",
            "TransformBodyArmor",
            True,
            bool,
            "Indicates whether the armor transformation should be applied to the whole body.",
        ),
        ParamFieldInfo("isInvisibleWeapon:1", "HideWeapon", True, bool, "Weapon is invisible if enabled."),
        ParamFieldInfo("isSilence:1", "IsSilent", True, bool, "Movement noises are silenced if enabled."),
        ParamFieldInfo("transformGauntlet:1", "TransformHandArmor", True, bool, ""),
        ParamFieldInfo("transformHelmet:1", "TransformHeadArmor", True, bool, ""),
        ParamFieldInfo("transformLeggings:1", "TransformLegsArmor", True, bool, ""),
        ParamFieldInfo("transformPriority:3", "TransformPriority", True, int, ""),
        ParamFieldInfo("transformWeaponId", "TransformWeaponID", True, int, ""),
        ParamFieldInfo("pad[12]", "Pad", False, pad_field(12), ""),
    ],
}


RESIDENT_FX_PARAM_ST = {
    "param_type": "RESIDENT_FX_PARAM_ST",
    "file_name": "ResidentVFXParam",
    "nickname": "ResidentVFX",
    "fields": [
        ParamFieldInfo("sfxId", "VisualEffectID", True, int, ""),
        ParamFieldInfo("dmypolyId", "ModelPoint", True, int, ""),
        ParamFieldInfo("pad_0[8]", "Pad", False, pad_field(8), ""),
    ],
}

from typing import Any, Dict, Tuple, Callable

COMMANDS: Dict[str, Dict[int, Dict[int, Tuple]]]
COMMANDS_BANK_ID_BY_TYPE_NAME: Dict[Tuple[str, str], Tuple[int, int]]
TEST_FUNCTIONS: Dict[str, Dict[int, Tuple]]
TEST_FUNCTIONS_ID_BY_TYPE_NAME: Dict[Tuple[str, str], int]
ATTACK_REQUEST_TYPE: Dict[int, str]


                # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
                # ~~~~~~~~~~~~~~~ CONSTANTS ~~~~~~~~~~~~~~~ #
                # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #

CALL_STATE_MACHINE: Dict[int, Callable]
MACHINE_ARGS: Dict[int, Any]
MACHINE_CALL_STATUS = ...
ONGOING = ...


                # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
                # ~~~~~~~~~~~~~~~ COMMANDS ~~~~~~~~~~~~~~~ #
                # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #

# ~~~~~~~~~~~ #
# ~~~ CHR ~~~ #
# ~~~~~~~~~~~ #

# COMMAND CHR[1][0]
def ChangeGeneralAnim(anim_id: int, layer_index: int, blend: float, is_loop: int): ...
# COMMAND CHR[1][1]
def ChangeUpperBodyAnim(): ...
# COMMAND CHR[1][2]
def ChangeStayAnim(): ...
# COMMAND CHR[1][3]
def ChangeGeneralAnimCategorized(anim_category, anim_id, layer_index, blend, is_loop): ...
# COMMAND CHR[1][4]
def ChangeUpperBodyAnimCategorized(): ...
# COMMAND CHR[1][5]
def ChangeGeneralAnimAdditiveCategorized(): ...
# COMMAND CHR[1][6]
def ChangeUpperBodyAnimAdditiveCategorized(): ...
# COMMAND CHR[1][7]
def ChangeGeneralAnimCategorizedMatchPlaybackTime(): ...
# COMMAND CHR[1][8]
def ChangeUpperBodyAnimCategorizedMatchPlaybackTime(): ...
# COMMAND CHR[1][9]
def SetAnimIDOffset(): ...
# COMMAND CHR[1][10]
def SetAdditiveBlendAnimation(): ...
# COMMAND CHR[1][11]
def SetAdditiveBlendAnimationSlotted(): ...
# COMMAND CHR[1][12]
def ChangeBlendAnimationCategorized(): ...
# COMMAND CHR[1][13]
def ChangeUpperAndLowerBodySyncedAnimCategorized(): ...
# COMMAND CHR[1][100]
def SwitchActiveActionState(): ...
# COMMAND CHR[1][101]
def SwitchMotion(): ...
# COMMAND CHR[1][102]
def SetThrowAttackTypePossible(): ...
# COMMAND CHR[1][103]
def SetThrowDefenseTypePossible(): ...
# COMMAND CHR[1][104]
def SwitchEquippedWeapon(): ...
# COMMAND CHR[1][105]
def SetReadyForAtkFinish(): ...
# COMMAND CHR[1][106]
def SetEquipmentChangeable(): ...
# COMMAND CHR[1][107]
def SetUnableToDrop(): ...
# COMMAND CHR[1][108]
def IssueMessageIDToEvents(): ...
# COMMAND CHR[1][109]
def SetAttackType(): ...
# COMMAND CHR[1][110]
def SetNoStaminaRecover(): ...
# COMMAND CHR[1][111]
def Command_CHR_1_111(): ...  # TODO
# COMMAND CHR[1][112]
def SetAIBusyDoingAction(): ...
# COMMAND CHR[1][113]
def BowTurn(): ...
# COMMAND CHR[1][114]
def SetIsHoldingBow(): ...
# COMMAND CHR[1][115]
def SwitchSpecificRangeMode(): ...
# COMMAND CHR[1][116]
def SwitchSpecialMotion(): ...
# COMMAND CHR[1][117]
def SetIsWeaponChanging(): ...
# COMMAND CHR[1][118]
def SetIsItemInUse(): ...
# COMMAND CHR[1][119]
def SetIsItemAnimPlaying(): ...
# COMMAND CHR[1][120]
def RemoveBinoculars(): ...
# COMMAND CHR[1][121]
def SetIsMagicInUse(): ...
# COMMAND CHR[1][122]
def IsHeadTurnPossible(): ...
# COMMAND CHR[1][123]
def ChangeHoveringState(): ...
# COMMAND CHR[1][124]
def ChangeToSpecialStay(): ...
# COMMAND CHR[1][125]
def OpenMenuWhenUsingItem(): ...
# COMMAND CHR[1][126]
def OpenMenuWhenUsingMagic(): ...
# COMMAND CHR[1][127]
def BlowDamageTurn(): ...
# COMMAND CHR[1][128]
def SetDeathStay(): ...
# COMMAND CHR[1][129]
def CloseMenuWhenUsingItem(): ...
# COMMAND CHR[1][130]
def CloseMenuWhenUsingMagic(): ...
# COMMAND CHR[1][131]
def AdditionNoTurning(): ...
# COMMAND CHR[1][132]
def WhiffPossibility(): ...
# COMMAND CHR[1][133]
def ChangeFlightStatus(): ...
# COMMAND CHR[1][134]
def SetStatsNotMetAnimID(): ...
# COMMAND CHR[1][135]
def ShowFixedYAxisDirectionDisplay(): ...
# COMMAND CHR[1][136]
def SetLadderActionState(): ...
# COMMAND CHR[1][137]
def ForceCancelThrowAnim(): ...
# COMMAND CHR[1][138]
def SetThrowState(): ...
# COMMAND CHR[1][139]
def LadderSlideStart(): ...
# COMMAND CHR[1][140]
def SetIsEventActionPossible(): ...
# COMMAND CHR[1][141]
def RequestThrowAnimInterrupt(): ...
# COMMAND CHR[1][142]
def SetHandStateOfLadder(): ...
# COMMAND CHR[1][143]
def SetDamageAnimType(): ...
# COMMAND CHR[1][144]
def SlideTurn(): ...
# COMMAND CHR[1][145]
def InterruptAttack(): ...
# COMMAND CHR[1][146]
def MidairDeathWarp(): ...
# COMMAND CHR[1][147]
def ClearSlopeInfo(): ...
# COMMAND CHR[1][148]
def StateInputRecieve(): ...
# COMMAND CHR[1][149]
def EquipmentChangeableFromMenu(): ...
# COMMAND CHR[1][200]
def SetVariable(): ...
# COMMAND CHR[1][151]
def AimAtSelfPosition(): ...
# COMMAND CHR[1][152]
def StateIdentifier(): ...
# COMMAND CHR[1][153]
def DoAIReplanningAtCancelTiming(): ...
# COMMAND CHR[1][154]
def DenyEventAnimPlaybackDemand(): ...
# COMMAND CHR[1][155]
def InvokeBackstab(): ...
# COMMAND CHR[1][156]
def WeaponParamReferent(): ...
# COMMAND CHR[1][157]
def AINotifyAttackType(): ...
# COMMAND CHR[1][158]
def SetAutoTrapTarget(): ...
# COMMAND CHR[1][159]
def ClearAutoTrapTarget(): ...
# COMMAND CHR[1][1000]
def AddHP(amount): ...
# COMMAND CHR[1][1001]
def AddStamina(amount): ...
# COMMAND CHR[1][1100]
def SyncAtInit_Active(): ...
# COMMAND CHR[1][1101]
def SyncAtInit_Passive(): ...
# COMMAND CHR[1][2000]
def SetIsTurnAnimInProgress(): ...
# COMMAND CHR[1][2001]
def CalculateTurnAnimCorrectionFactor(): ...
# COMMAND CHR[1][2002]
def SetStealthState(): ...
# COMMAND CHR[1][2003]
def SetMoveMult(): ...
# COMMAND CHR[1][2004]
def SpEffectAccomodation(): ...
# COMMAND CHR[1][2005]
def StealthyHighSpeedThrowEffective(): ...
# COMMAND CHR[1][2006]
def SetTurnSpeed(): ...

# These are likely only added in Dark Souls 3.

# COMMAND CHR[1][2007]
def SetCeremonyState(): ...
# COMMAND CHR[1][2008]
def SetDamageMotionBlendRatio(): ...
# COMMAND CHR[1][2009]
def SetForceTurnTarget(): ...
# COMMAND CHR[1][2010]
def InSpecialGuard(): ...
# COMMAND CHR[1][2011]
def SetWeaponCancelType(): ...
# COMMAND CHR[1][2012]
def IsPreciseShootingPossible(): ...
# COMMAND CHR[1][2013]
def ChooseBowAndArrowSlot(): ...
# COMMAND CHR[1][2014]
def Set4DirectionMovementThreshold(): ...
# COMMAND CHR[1][2015]
def LockonSystemUnableToTurnAngle(): ...
# COMMAND CHR[1][2016]
def ReserveArtsPointsUse(): ...
# COMMAND CHR[1][2017]
def SetArtsPointFEDisplayState(): ...
# COMMAND CHR[1][2018]
def LockonFixedAngleCancel(): ...

# End of DS3 only.

# COMMAND CHR[1][2019]
def TurnToLockonTargetImmediately(): ...
# COMMAND CHR[1][2020]
def SetSpecialInterpolation(): ...
# COMMAND CHR[1][2021]
def LadderSlideDownCancel(): ...
# COMMAND CHR[1][2022]
def DisableMagicIDSwitching(): ...
# COMMAND CHR[1][2023]
def DisableToolIDSwitching(): ...
# COMMAND CHR[1][9000]
def DebugLogOutput(text): ...

# These are likely only added in Dark Souls 3.

# COMMAND CHR[1][9001]
def Test_SpEffectDelete(): ...
# COMMAND CHR[1][9002]
def Test_SpEffectTypeSpecifyDelete(): ...
# COMMAND CHR[1][9100]
def AnimationCancel(): ...
# COMMAND CHR[1][9101]
def RequestAIReprogramming(): ...
# COMMAND CHR[1][9102]
def MarkOfGreedyPersonSlipDamageDisable(): ...
# COMMAND CHR[1][9103]
def ResetInputQueue(): ...
# COMMAND CHR[1][9104]
def SetIsEventAnim(): ...
# COMMAND CHR[1][9105]
def AIAttackState(): ...

# End of DS3 only.


# ~~~~~~~~~~~~ #
# ~~~ TALK ~~~ #
# ~~~~~~~~~~~~ #


# COMMAND TALK[1][0]
def DebugEvent(message: str): ...
# COMMAND TALK[1][1]
def TalkToPlayer(*args): ...
# COMMAND TALK[1][2]
def InvokeEvent(*args): ...
# COMMAND TALK[1][3]
def StopAttacking(*args): ...
# COMMAND TALK[1][4]
def Attack(*args): ...
# COMMAND TALK[1][5]
def RemoveMyAggro(*args): ...
# COMMAND TALK[1][6]
def DisplayOneLineHelp(text_id: int): ...
# COMMAND TALK[1][7]
def TurnToFacePlayer(*args): ...
# COMMAND TALK[1][8]
def ForceEndTalk(unk1: int): ...
# COMMAND TALK[1][9]
def ClearTalkProgressData(): ...
# COMMAND TALK[1][10]
def ShowShopMessage(*args): ...
# COMMAND TALK[1][11]
def SetFlagState(flag: int, state: int): ...
# COMMAND TALK[1][12]
def CloseShopMessage(): ...
# COMMAND TALK[1][13]
def OpenCampMenu(*args): ...
# COMMAND TALK[1][14]
def CloseCampMenu(*args): ...
# COMMAND TALK[1][15]
def ChangeTeamType(*args): ...
# COMMAND TALK[1][16]
def SetDefaultTeamType(*args): ...
# COMMAND TALK[1][17]
def OpenGenericDialog(unk1: int, text_id: int, unk2: int, unk3: int, display_distance: int): ...
# COMMAND TALK[1][18]
def ForceCloseGenericDialog(): ...
# COMMAND TALK[1][19]
def AddTalkListData(menu_index: int, menu_text: int, required_flag: int): ...
# COMMAND TALK[1][20]
def ClearTalkListData(*args): ...
# COMMAND TALK[1][21]
def RequestMoviePlayback(*args): ...
# COMMAND TALK[1][22]
def OpenRegularShop(*args): ...
# COMMAND TALK[1][23]
def OpenRepairShop(): ...
# COMMAND TALK[1][24]
def OpenEnhanceShop(category: int): ...
# COMMAND TALK[1][25]
def OpenHumanityMenu(*args): ...
# COMMAND TALK[1][26]
def OpenMagicShop(*args): ...
# COMMAND TALK[1][27]
def OpenMiracleShop(*args): ...
# COMMAND TALK[1][28]
def OpenMagicEquip(first_id: int, last_id: int): ...
# COMMAND TALK[1][29]
def OpenMiracleEquip(*args): ...
# COMMAND TALK[1][30]
def OpenRepository(): ...  # Bottomless Box in DS1
# COMMAND TALK[1][31]
def OpenSoul(): ...
# COMMAND TALK[1][32]
def CloseMenu(*args): ...
# COMMAND TALK[1][33]
def SetEventFlagRange(*args): ...
# COMMAND TALK[1][34]
def OpenDepository(*args): ...
# COMMAND TALK[1][35]
def ClearTalkActionState(): ...
# COMMAND TALK[1][36]
def ClearTalkDisabledState(): ...
# COMMAND TALK[1][37]
def SetTalkDisableStateMaxDuration(*args): ...
# COMMAND TALK[1][38]
def SetUpdateDistance(distance: int): ...
# COMMAND TALK[1][39]
def ClearPlayerDamageInfo(): ...
# COMMAND TALK[1][40]
def OfferHumanity(): ...
# COMMAND TALK[1][41]
def StartWarpMenuInit(): ...
# COMMAND TALK[1][42]
def StartBonfireAnimLoop(): ...
# COMMAND TALK[1][43]
def EndBonfireKindleAnimLoop(): ...
# COMMAND TALK[1][46]
def OpenSellShop(*args): ...
# COMMAND TALK[1][47]
def ChangePlayerStats(unk1: int, unk2: int, unk3: int): ...  # TODO: Map enums for this.
# COMMAND TALK[1][48]
def OpenEquipmentChangeOfPurposeShop(*args): ...
# COMMAND TALK[1][49]
def CombineMenuFlagAndEventFlag(*args): ...
# COMMAND TALK[1][50]
def RequestSave(*args): ...
# COMMAND TALK[1][51]
def ChangeMotionOffsetID(*args): ...
# COMMAND TALK[1][52]
def PlayerEquipmentQuantityChange(*args): ...
# COMMAND TALK[1][53]
def RequestUnlockTrophy(*args): ...
# COMMAND TALK[1][54]
def EnterBonfireEventRange(*args): ...
# COMMAND TALK[1][55]
def SetAquittalCostMessageTag(*args): ...
# COMMAND TALK[1][56]
def SubtractAcquittalCostFromPlayerSouls(*args): ...
# COMMAND TALK[1][57]
def ShuffleRNGSeed(*args): ...
# COMMAND TALK[1][58]
def SetRNGSeed(*args): ...
# COMMAND TALK[1][59]
def ReplaceTool(*args): ...
# COMMAND TALK[1][60]
def BreakCovenantPledge(*args): ...
# COMMAND TALK[1][61]
def PlayerRespawn(*args): ...
# COMMAND TALK[1][62]
def GiveSpEffectToPlayer(speffect: int): ...
# COMMAND TALK[1][63]
def DisplayBanner(banner_type: int): ...
# COMMAND TALK[1][64]
def AddIzalithRankingPoints(*args): ...
# COMMAND TALK[1][65]
def OpenItemAcquisitionMenu(*args): ...
# COMMAND TALK[1][66]
def AcquireGesture(*args): ...
# COMMAND TALK[1][67]
def ForceCloseMenu(): ...
# COMMAND TALK[1][68]
def SetTalkTime(*args): ...
# COMMAND TALK[1][69]
def CollectJustPyromancyFlame(*args): ...
# COMMAND TALK[1][70]
def OpenArenaRanking(*args): ...
# COMMAND TALK[1][71]
def ReportConversationEndToHavokBehavior(*args): ...
# COMMAND TALK[1][72]
def Command_TALK_1_72(*args): ...  # TODO
# COMMAND TALK[1][75]
def Command_TALK_1_75(*args): ...  # TODO
# COMMAND TALK[1][76]
def OpenConversationChoicesMenu(*args): ...
# COMMAND TALK[1][80]
def StopEventAnimWithoutForcingConversationEnd(*args): ...
# COMMAND TALK[1][81]
def OpenCharaMakeMenu(*args): ...
# COMMAND TALK[1][82]
def OpenChooseQuantityDialog(*args): ...
# COMMAND TALK[1][83]
def ClearQuantityValueOfChooseQuantityDialog(*args): ...
# COMMAND TALK[1][100]
def SetWorkValue(*args): ...
# COMMAND TALK[1][101]
def UpdatePlayerRespawnPoint(*args): ...
# COMMAND TALK[1][102]
def SetMessageTagValue(*args): ...
# COMMAND TALK[1][103]
def TurnCharacterToFaceEntity(*args): ...
# COMMAND TALK[1][104]
def GetItemFromItemLot(*args): ...
# COMMAND TALK[1][105]
def OpenEstusAllotMenu(*args): ...
# COMMAND TALK[1][106]
def AddRankingPoints(*args): ...
# COMMAND TALK[1][107]
def OpenHollowLevelUpMenu(*args): ...
# COMMAND TALK[1][110]
def Command_TALK_1_110(): ...
# COMMAND TALK[5][19]
def AddTalkListDataIf(condition: bool, menu_index: int, menu_text: int, required_flag: int): ...


                # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
                # ~~~~~~~~~~~~~~~ TEST FUNCTIONS ~~~~~~~~~~~~~~~ #
                # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #

# ~~~~~~~~~~~ #
# ~~~ CHR ~~~ #
# ~~~~~~~~~~~ #

# TEST CHR[0]
def IsGeneralAnimEnd(): ...
# TEST CHR[1]
def IsAttackAnimEnd(): ...
# TEST CHR[9]
def AnimIDOffset(): ...
# TEST CHR[10]
def AdditiveBlendAnim(): ...
# TEST CHR[11]
def AdditiveBlendAnimOfSlot(): ...
# TEST CHR[100]
def IsAtkRequest(request_type): ...
# TEST CHR[101]
def IsAtkReleaseRequest(): ...
# TEST CHR[102]
def IsChainAtkRequest(): ...
# TEST CHR[103]
def GetAtkDuration(): ...
# TEST CHR[104]
def GetWeaponSwitchRequest(): ...
# TEST CHR[105]
def GetCommandIDFromEvent(): ...
# TEST CHR[106]
def GetAIActionType(): ...
# TEST CHR[107]
def GetAIChainActionType(): ...
# TEST CHR[108]
def GetChainEvadeRequest(): ...
# TEST CHR[109]
def GetWeaponChangeRequest(): ...
# TEST CHR[110]
def GetAnimIDFromMoveParam(): ...
# TEST CHR[111]
def IsThereAnyAtkRequest(): ...
# TEST CHR[112]
def IsThereAnyChainAtkRequest(): ...
# TEST CHR[113]
def IsItemUseMenuOpening(): ...
# TEST CHR[114]
def IsMagicUseMenuOpening(): ...
# TEST CHR[115]
def IsItemUseMenuOpened(): ...
# TEST CHR[116]
def IsMagicUseMenuOpened(): ...
# TEST CHR[117]
def GetBlendAnimIDFromMoveParam(): ...
# TEST CHR[118]
def GetAIChainStepType(): ...
# TEST CHR[119]
def GetTransitionToSpecialStayAnimID(): ...
# TEST CHR[120]
def GetAIAtkCancelType(): ...
# TEST CHR[121]
def GetWeaponCancelType(): ...
# TEST CHR[122]
def IsWeaponCancelPossible(): ...
# TEST CHR[123]
def GetAIDefenseCancelType(): ...
# TEST CHR[124]
def GetAIVersusBackstabCancelType(): ...
# TEST CHR[200]
def IsFalling(): ...
# TEST CHR[201]
def IsLanding(): ...
# TEST CHR[202]
def GetReceivedDamageType(): ...
# TEST CHR[203]
def IsActiveActionValid(): ...
# TEST CHR[204]
def GetActionEventNumber(): ...
# TEST CHR[205]
def IsNormalDmgPassThroughDuringThrow(): ...
# TEST CHR[206]
def IsThrowing(): ...
# TEST CHR[207]
def GetWeaponSwitchState(): ...
# TEST CHR[209]
def IsEquipmentSwitchPossible(): ...
# TEST CHR[210]
def IsAnimCancelPossibleInAtkRelease(): ...
# TEST CHR[211]
def IsEmergencyStopAnimPlaying(): ...
# TEST CHR[212]
def GetLockRangeState(): ...
# TEST CHR[213]
def GetLockAngleState(): ...
# TEST CHR[214]
def IsAnimCancelPossibleInDamageHit(): ...
# TEST CHR[215]
def IsChangeToScrapeAtk(): ...
# TEST CHR[216]
def IsChangeToDeflectAtk(): ...
# TEST CHR[217]
def IsChangeToAfterParrySuccess(): ...
# TEST CHR[218]
def IsChangeFromNormalToBigAtk(): ...
# TEST CHR[219]
def GetMovementType(): ...
# TEST CHR[220]
def IsLargeAtkComboPossible(): ...
# TEST CHR[221]
def IsMapActionPossible(): ...
# TEST CHR[222]
def GetReceivedDamageDirection(): ...
# TEST CHR[223]
def GetMapActionID(): ...
# TEST CHR[224]
def GetFallHeight(): ...
# TEST CHR[225]
def GetEquipWeaponCategory(): ...
# TEST CHR[226]
def IsHoldingBow(): ...
# TEST CHR[227]
def GetMagicAnimType(): ...
# TEST CHR[228]
def WasNotLargeAtk(): ...
# TEST CHR[229]
def IsBackAtkPossible(): ...
# TEST CHR[230]
def IsAfterParryAtkPossible(): ...
# TEST CHR[231]
def GetItemAnimType(): ...
# TEST CHR[232]
def IsMagicUseable(): ...
# TEST CHR[233]
def IsItemUseable(): ...
# TEST CHR[234]
def IsPrecisionShoot(): ...
# TEST CHR[235]
def IsFireDamaged(): ...
# TEST CHR[236]
def GetDamageLevel(): ...
# TEST CHR[237]
def GetGuardLevelAction(): ...
# TEST CHR[238]
def IsNewLeftHandAtkFromStay(): ...
# TEST CHR[239]
def IsParryFromIdle(): ...
# TEST CHR[240]
def IsGuardFromIdle(): ...
# TEST CHR[241]
def IsNewLeftHandAtkFromAtkCancel(): ...
# TEST CHR[242]
def IsParryFromAtkCancel(): ...
# TEST CHR[243]
def IsGuardFromAtkCancel(): ...
# TEST CHR[244]
def IsTiedUp(): ...
# TEST CHR[245]
def IsOutOfAmmo(): ...
# TEST CHR[246]
def IsUseCatLanding(): ...
# TEST CHR[247]
def GetHoverMoveState(): ...
# TEST CHR[248]
def IsTruelyLanding(): ...
# TEST CHR[249]
def IsRightHandMagic(): ...
# TEST CHR[250]
def IsChangeToSpecialStayAnim(): ...
# TEST CHR[251]
def GetSpecialStayAnimID(): ...
# TEST CHR[252]
def AcquireSpecialDamageAnimationID(): ...
# TEST CHR[253]
def IsRunTurnAnimPlaying(): ...
# TEST CHR[254]
def IsGenerateAction(): ...
# TEST CHR[255]
def GetSpecialStayCancelAnimID(): ...
# TEST CHR[256]
def HasReceivedAnyDamage(): ...
# TEST CHR[257]
def GetMoveAnimParamID(): ...
# TEST CHR[258]
def GetGuardLevel(): ...
# TEST CHR[259]
def IsRequestTurnAnimStart(): ...
# TEST CHR[260]
def IsTurningWithAnim(): ...
# TEST CHR[261]
def IsFlying(): ...
# TEST CHR[262]
def IsAbilityInsufficient(): ...
# TEST CHR[263]
def GetEquipWeightRatioForFalling(): ...
# TEST CHR[264]
def GetFlightMotionState(): ...
# TEST CHR[265]
def GetIsWeakPoint(): ...
# TEST CHR[266]
def GetMoveAnimBlendRatio(): ...
# TEST CHR[267]
def GetLadderActionState(): ...
# TEST CHR[268]
def IsInDisguise(): ...
# TEST CHR[269]
def IsCoopWait(): ...
# TEST CHR[270]
def IsCoop(): ...
# TEST CHR[271]
def IsSpecialTransitionPossible(): ...
# TEST CHR[272]
def GetLandingAnimBlendRatio(): ...
# TEST CHR[273]
def GetThrowAnimID(): ...
# TEST CHR[274]
def DidOpponentDieFromThrow(): ...
# TEST CHR[275]
def HasThrowEnded(): ...
# TEST CHR[276]
def IsThrowSelfDeath(): ...
# TEST CHR[277]
def IsThrowSuccess(): ...
# TEST CHR[278]
def GetGuardMotionCategory(): ...
# TEST CHR[279]
def IsBeingThrown(): ...
# TEST CHR[280]
def IsSelfThrow(): ...
# TEST CHR[281]
def IsThrowDeathState(): ...
# TEST CHR[282]
def GetNewLockState(): ...
# TEST CHR[283]
def IsOnLadder(): ...
# TEST CHR[284]
def GetPhysicalAttribute(): ...
# TEST CHR[285]
def GetSpecialAttribute(): ...
# TEST CHR[286]
def GetSpecialStayDeathAnimID(): ...
# TEST CHR[287]
def HasReceivedAnyDamage_AnimEnd(): ...
# TEST CHR[288]
def EggGrowth_IsHeadScratch(): ...
# TEST CHR[289]
def EggGrowth_IsBecomeEggHead(): ...
# TEST CHR[290]
def IsStop(): ...
# TEST CHR[291]
def IsSomeoneOnLadder(): ...
# TEST CHR[292]
def IsSomeoneUnderLadder(): ...
# TEST CHR[293]
def GetLadderHandState(): ...
# TEST CHR[294]
def DoesLadderHaveCharacters(): ...
# TEST CHR[295]
def IsLadderRightHandStayState(): ...
# TEST CHR[296]
def DescendingToFloor(): ...
# TEST CHR[297]
def IsInputDirectionMatch(): ...
# TEST CHR[298]
def IsSpecialTransition2Possible(): ...
# TEST CHR[299]
def IsVersusDivineDamage(): ...
# TEST CHR[300]
def IsGeneralAnimCancelPossible(): ...
# TEST CHR[301]
def GetEventEzStateFlag(): ...
# TEST CHR[302]
def IsLadderEventEnd(): ...
# TEST CHR[303]
def IsReachBottomOfLadder(): ...
# TEST CHR[304]
def IsReachTopOfLadder(): ...
# TEST CHR[305]
def GetStateChangeType(): ...
# TEST CHR[306]
def IsOnLastRungOfLadder(): ...
# TEST CHR[311]
def GetWeaponDurability(): ...
# TEST CHR[312]
def IsWeaponBroken(): ...
# TEST CHR[313]
def IsAnimEndBySkillCancel(): ...
# TEST CHR[314]
def EggGrowth_IsBecomeEgghead_SecondStage(): ...
# TEST CHR[315]
def IsHamariFallDeath(): ...
# TEST CHR[316]
def IsClient(): ...
# TEST CHR[317]
def IsSlope(): ...
# TEST CHR[318]
def IsSwitchState(): ...
# TEST CHR[319]
def IsPressUpKey(): ...
# TEST CHR[320]
def IsSpecialTurning(): ...
# TEST CHR[321]
def GetIntValueForTest(): ...
# TEST CHR[322]
def IsObjActInterpolatedMotion(): ...
# TEST CHR[323]
def GetObjActTargetDirection(): ...
# TEST CHR[324]
def GetObjActRemainingInterpolateTime(): ...
# TEST CHR[325]
def IsGap(): ...
# TEST CHR[326]
def GetWeaponID(): ...
# TEST CHR[327]
def IsMovingLaterally(): ...
# TEST CHR[328]
def IsNet(): ...
# TEST CHR[329]
def HasBrokenSA(): ...
# TEST CHR[330]
def IsEmergencyQuickTurnActivated(): ...
# TEST CHR[331]
def IsDoubleChantPossible(): ...
# TEST CHR[332]
def IsAnimOver(): ...
# TEST CHR[333]
def ObtainedDT(): ...
# TEST CHR[334]
def GetBehaviorID(): ...
# TEST CHR[335]
def IsTwoHandPossible(): ...
# TEST CHR[336]
def IsPartDamageAdditiveBlendInvalid(): ...
# TEST CHR[337]
def IsThrowPosRealign(): ...
# TEST CHR[338]
def GetBoltLoadingState(): ...
# TEST CHR[339]
def IsAnimEnd(): ...
# TEST CHR[340]
def IsTwinSwords(): ...
# These are likely only added in Dark Souls 3.
# TEST CHR[341]
def DS3GetTurnAngleForDelayedTurn(): ...
# TEST CHR[342]
def DS3GetThrowDefenseCount(): ...
# TEST CHR[343]
def DS3IsEmergencyEvasionPossible(): ...
# TEST CHR[344]
def DS3HasEnoughArtsPoints(): ...
# TEST CHR[345]
def DS3GetEquipWeaponSpecialCategoryNumber(): ...
# TEST CHR[346]
def DS3CheckForEventAnimPlaybackRequest(): ...
# TEST CHR[347]
def DS3IsFemale(): ...
# TEST CHR[348]
def DS3GetDelayTurnAngleDifference(): ...
# TEST CHR[349]
def DS3IsDamageMotionOff(): ...
# TEST CHR[350]
def DS3HasReachedStatsNeededForWeapon(): ...
# TEST CHR[351]
def DS3UpperArmControlOuterAngle(): ...
# TEST CHR[352]
def DS3UpperArmControlTopAndBottomAngle(): ...
# TEST CHR[353]
def DS3CompleteLadderSlideDown(): ...
# TEST CHR[354]
def DS3GetLadderRungCount(): ...
# TEST CHR[355]
def DS3GetNumberOfRungsBelowOnLadder(): ...
# TEST CHR[356]
def DS3GetBowAndArrowSlot(): ...
# TEST CHR[357]
def DS3GetWeaponStorageSpotType(): ...
# TEST CHR[358]
def DS3GetStayAnimCategory(): ...
# TEST CHR[359]
def DS3GetWeaponSwitchState(): ...
# TEST CHR[360]
def DS3IsEquipmentMenuOpen(): ...
# TEST CHR[361]
def DS3GetRemainingArrowCount(): ...
# End of DS3 only.
# TEST CHR[1000]
def GetHP(): ...
# TEST CHR[1001]
def GetStamina(): ...
# TEST CHR[1002]
def IsGhost(): ...
# TEST CHR[1003]
def GetRandomInt(): ...
# TEST CHR[1004]
def GetRandomFloat(): ...
# TEST CHR[1005]
def IsUnableToDie(): ...
# TEST CHR[1006]
def IsResurrectionPossible(): ...
# TEST CHR[1007]
def IsCOMPlayer(): ...
# TEST CHR[1008]
def GetAITargetAwareState(): ...
# TEST CHR[1009]
def IsAIChangeToAwareState(): ...
# TEST CHR[1010]
def GetAITargetAwareStatePreviousFrame(): ...
# TEST CHR[1100]
def GetTestDamageAnimID(): ...
# TEST CHR[1101]
def IsInvincibleDebugMode(): ...
# TEST CHR[1102]
def WasGameLaunchedInPGTestMode(): ...
# TEST CHR[1103]
def IsTiltingStick(): ...
# TEST CHR[1104]
def DS3GetGestureRequestNumber(): ...
# TEST CHR[1105]
def DS3IsStayState(): ...
# TEST CHR[1106]
def DS3ActionRequest(): ...
# TEST CHR[1107]
def DS3ActionCancelRequest(): ...
# TEST CHR[1108]
def DS3ActionDuration(): ...
# TEST CHR[1109]
def DS3HasActionRequest(): ...
# TEST CHR[1110]
def DS3MovementRequest(): ...
# TEST CHR[1111]
def DS3MovementRequestDuration(): ...
# TEST CHR[1112]
def DS3HasThrowRequest(): ...
# TEST CHR[1113]
def DS3IsGuardCancelPossible(): ...
# TEST CHR[1114]
def DS3DoesAnimExist(): ...
# TEST CHR[1115]
def DS3GetAIMovementType(): ...
# TEST CHR[1116]
def DS3GetSpecialEffectID(): ...
# TEST CHR[1117]
def DS3IsConversationEnd(): ...
# TEST CHR[1118]
def DS3IsLocked(): ...
# TEST CHR[1119]
def DS3GetAtkDirection(): ...
# TEST CHR[1120]
def DS3GetPartGroup(): ...
# TEST CHR[1121]
def DS3GetKnockbackDistance(): ...
# TEST CHR[2000]
def DS3IsMoveCancelPossible(): ...
# TEST CHR[2002]
def DS3GetSpecialMovementType(): ...
# TEST CHR[2003]
def DS3GetGeneralTAEFlag(): ...
# TEST CHR[2004]
def DS3IsSwingHitTarget(): ...
# TEST CHR[2005]
def DS3GetCeremonyState(): ...
# TEST CHR[2006]
def DS3GetSuccessiveGuardCount(): ...
# TEST CHR[2007]
def DS3GetMinLuck(): ...
# TEST CHR[2008]
def DS3GetAccumulatedLuck(): ...
# TEST CHR[2009]
def DS3GetMaxLuck(): ...
# TEST CHR[2010]
def DS3GetMaxStamina(): ...
# TEST CHR[2011]
def DS3GetGeneralMSBParameter(): ...
# TEST CHR[2012]
def DS3IsHitWall(): ...
# TEST CHR[2013]
def DS3GetSafetyDirection(): ...
# TEST CHR[2014]
def DS3IsInCeremony(): ...
# TEST CHR[2015]
def DS3IsDoingCorpseCarryKeyframe(): ...
# TEST CHR[2016]
def DS3GetMP(): ...
# TEST CHR[2017]
def DS3IsCeremonyComplete(): ...
# TEST CHR[2018]
def DS3IsCeremonyInterrupt(): ...

# ~~~~~~~~~~~~ #
# ~~~ TALK ~~~ #
# ~~~~~~~~~~~~ #

# TEST TALK[0]
def GetWhetherEnemiesAreNearby(*args): ...
# TEST TALK[1]
def GetDistanceToPlayer() -> float: ...
# TEST TALK[2]
def HasTalkEnded(*args): ...
# TEST TALK[3]
def CheckSelfDeath() -> bool: ...
# TEST TALK[4]
def IsPlayerTalkingToMe() -> bool: ...
# TEST TALK[5]
def IsAttackedBySomeone(*args): ...
# TEST TALK[6]
def GetSelfHP() -> int: ...  # 0 to 100
# TEST TALK[7]
def GetDistanceFromEnemy(*args): ...
# TEST TALK[8]
def GetRelativeAngleBetweenPlayerAndSelf() -> float: ...
# TEST TALK[9]
def IsPlayerAttacking(*args): ...
# TEST TALK[10]
def GetRelativeAngleBetweenSelfAndPlayer(*args): ...
# TEST TALK[11]
def IsTalkInProgress(*args): ...
# TEST TALK[12]
def GetTalkInterruptReason(*args): ...
# TEST TALK[13]
def GetShopCondition(*args): ...
# TEST TALK[14]
def GetOneLineHelpStatus(*args): ...
# TEST TALK[15]
def GetFlagState(flag: int) -> bool: ...
# TEST TALK[16]
def IsEquipmentIDObtained(*args): ...
# TEST TALK[17]
def IsEquipmentIDEquipped(*args): ...
# TEST TALK[18]
def IsFightingAlone(*args): ...
# TEST TALK[19]
def IsClientPlayer(*args): ...
# TEST TALK[20]
def IsCampMenuOpen(*args): ...
# TEST TALK[21]
def IsGenericDialogOpen() -> int: ...  # TODO: Could be bool output.
# TEST TALK[22]
def GetGenericDialogButtonResult() -> int: ...
# TEST TALK[23]
def GetTalkListEntryResult() -> int: ...
# TEST TALK[24]
def IsMoviePlaying(*args): ...
# TEST TALK[25]
def IsMenuOpen(menu_index: int) -> bool: ...
# TEST TALK[26]
def IsCharacterDisabled() -> bool: ...
# TEST TALK[27]
def IsPlayerDead(*args): ...
# TEST TALK[28]
def DidYouDoSomethingInTheMenu(*args): ...
# TEST TALK[29]
def GetStatus(*args): ...
# TEST TALK[30]
def IsPlayerMovingACertainDistance(*args): ...
# TEST TALK[31]
def IsTalkingToSomeoneElse() -> bool: ...
# TEST TALK[32]
def HasDisableTalkPeriodElapsed(*args): ...
# TEST TALK[33]
def HasPlayerBeenAttacked() -> bool: ...
# TEST TALK[34]
def GetPlayerYDistance(*args): ...
# TEST TALK[35]
def GetPlayerChrType(*args): ...
# TEST TALK[36]
def CanIGoToNextTalkBlock(*args): ...
# TEST TALK[37]
def CompareBonfireState(*args): ...
# TEST TALK[38]
def CompareBonfireLevel(*args): ...
# TEST TALK[39]
def CompareParentBonfire(*args): ...
# TEST TALK[40]
def BonfireRegistration0(*args): ...
# TEST TALK[41]
def BonfireRegistration1(*args): ...
# TEST TALK[42]
def BonfireRegistration2(*args): ...
# TEST TALK[43]
def BonfireRegistration3(*args): ...
# TEST TALK[44]
def BonfireRegistration4(*args): ...
# TEST TALK[45]
def ComparePlayerStatus(*args): ...
# TEST TALK[46]
def RelativeAngleBetweenTwoPlayers_SpecifyAxis(*args): ...
# TEST TALK[47]
def ComparePlayerInventoryNumber(*args): ...
# TEST TALK[48]
def IsPlayerCurrentWeaponDamaged(*args): ...
# TEST TALK[49]
def ComparePlayerAcquittalPrice(*args): ...
# TEST TALK[50]
def CompareRNGValue(*args): ...
# TEST TALK[51]
def WasWarpMenuDestinationSelected(*args): ...
# TEST TALK[52]
def IsMultiplayerInProgress(*args): ...
# TEST TALK[53]
def IsTalkExclusiveMenuOpen(*args): ...
# TEST TALK[54]
def IsRankingMenuOpen(*args): ...
# TEST TALK[55]
def GetPlayerRemainingHP(*args): ...
# TEST TALK[56]
def CheckActionButtonArea(*args): ...
# TEST TALK[57]
def CheckSpecificPersonTalkHasEnded(*args): ...
# TEST TALK[58]
def CheckSpecificPersonGenericDialogIsOpen(*args): ...
# TEST TALK[59]
def CheckSpecificPersonMenuIsOpen(*args): ...
# TEST TALK[60]
def DoesSelfHaveSpEffect(*args): ...
# TEST TALK[61]
def DoesPlayerHaveSpEffect(*args): ...
# TEST TALK[62]
def GetValueFromNumberSelectDialog(*args): ...
# TEST TALK[72]
def Test_TALK_72(*args): ...  # TODO
# TEST TALK[75]
def Test_TALK_75(*args): ...  # TODO
# TEST TALK[100]
def GetWorkValue(*args): ...
# TEST TALK[101]
def GetEventFlagValue(*args): ...
# TEST TALK[102]
def GetCurrentStateElapsedFrames(*args): ...
# TEST TALK[103]
def GetCurrentStateElapsedTime(*args): ...
# TEST TALK[104]
def GetPlayerStatus(*args): ...
# TEST TALK[105]
def GetLevelUpSoulCost(*args): ...
# TEST TALK[106]
def GetWhetherChrTurnAnimHasEnded(*args): ...
# TEST TALK[107]
def GetWhetherChrEventAnimHasEnded(*args): ...
# TEST TALK[108]
def GetItemHeldNumLimit(*args): ...

# TODO: Lost ID.
# def GetCurrentAnimation(): ...
